&sphincs_id_particles
!-------------------------------------------------------------------------!
! gfortran requires the assignment to be on the same line, ifort does not !
!-------------------------------------------------------------------------!

!----------------------------------------------------------------------------!
! Desired total particle number                                              !
! The particle number on each matter object is determined by the mass ratios !
!----------------------------------------------------------------------------!
! gfortran cannot read scientific notation for integers;
! e.g., npart_des= 3.0D+5 does not work with gfortran
npart_des= 500000
!------------------------------------------------------------------------!
! Parameters needed to read the particle positions from a formatted file !
!   The code assumes that one star has negative x coordinates, and the   !
!   other has positive x coordinates; the code also reflect the          !
!   particles with z > 0 to z < 0, to impose the equatorial-plane        !
!   symmetry                                                             !
!------------------------------------------------------------------------!
parts_pos_path=""     ! Path to the directory containing the
                      ! formatted files with the particle positions
parts_pos="final_pos_nu.dat"
columns(:)=1,2,3 !2,3,4            ! Columns containing the particle positions;
           !1,2,3             ! x,y,z in this order
read_nu=.TRUE.               ! If .TRUE., the values of nu at the particle
                              ! positions are also read from the file
column_nu=4 !19                  ! Column containing nu (baryon number per particle)
          !4
n_cols=4 !21                   ! Total number of columns in the file
       !4
header_lines=0 !4              ! Number of header lines in the file
             !0
!----------------------------------------------------------!
! Choose to reflect particles with respect to the yz plane !
! if the stars have masses that differ less than 0.5%      !
!----------------------------------------------------------!
reflect_particles_x= .TRUE.
!---------------------------------------------------------------!
! Parameters needed to place and filter particles on lattice(s) !
!---------------------------------------------------------------!
stretch=1.2     ! Factor by which the lattices around the stars are stretched
use_thres=.FALSE.
thres=10      ! (~rho_max)/thres is the minimum mass density considered
                ! when placing particles. Used only when redistribute_nu is
                ! .FALSE. . When redistribute_nu is .TRUE. thres= 100*nu_ratio
redistribute_nu=.FALSE. ! If .TRUE., nu is reassigned on the particles such that
                       ! the baryon number ratio does not exceed nu_ratio on
                       ! each star (DEPRECATED)
nu_ratio_des=3.0       ! Desired baryon number ratio. Used only when
                       ! redistribute_nu is .TRUE.
!---------------------------------------------------------------!
! Parameters needed to place particles on spherical surfaces    !
!   This method integrates the density over the stars, computes !
!   the masses of the surfaces and then the number of particles !
!   per surface, trying to minimize the particle mass ratio     !
!   by iteration.                                               !
!---------------------------------------------------------------!
! gfortran cannot read scientific notation for integers; i.e., 3.0D+5 for
! npart_approx does not work
last_r= 0.99D0     ! The radius of the last spherical surface is
                   ! last_r*(star radius)
                   ! The last surface always contains the mass of the last
                   ! layers up to the edge of the star
upper_bound= 1.025D0  ! Desired upper bound for the differences between particle
                      ! masses on neighbouring spherical surfaces
lower_bound= 0.975D0  ! Desired lower bound for the same differences as above
                      ! It might not be possible to obtain a particle number on
                      ! a surface such that the above bounds are respected.
                      ! If this happens, usually the particle number on the surface
                      ! changes periodically during the iteration and the latter
                      ! never converges. This is mainly due to the fact that while
                      ! the particle masses and the surface masses are real numbers,
                      ! the particle number is an integer. Explicitly, it might be
                      ! that a real number of particles is needed to have a certain
                      ! particle mass on a surface with a given mass. In the current
                      ! implementation, the surface mass is kept constant, hence an
                      ! integer number of particle may not necessarily converge.
                      ! The currently implemented solution is to allow for a small
                      ! change in the bounds above, that can be specified with the
                      ! following parameters.
max_steps= 100        ! If, after max_steps, the iteration did not converge,
                      ! multiply upper_bound by upper_factor, and lower_bound
                      ! by lower_factor. max_steps >= 10. 100 is a nice value
upper_factor= 1.01D0  ! >= 1, usually an increase of 1% works
lower_factor= 0.99D0  ! <= 1, usually a decrease of 1% works
randomize_phi=  .TRUE.  ! Randomize particle positions in phi
randomize_theta=.TRUE.  ! Randomize particle positions in theta
randomize_r=    .TRUE.  ! Randomize particle positions in r and push inside
                        ! the outer layers by a little random displacement
                        ! Setting randomize_phi and randomize_theta to .TRUE.
                        ! yields better results in the APM iteration.
                        ! Setting randomize_r to .TRUE. is not as crucial as
                        ! for the other two.
!----------------------------------------------------------!
! Parameters for the Artificial Pressure Method (APM)      !
!----------------------------------------------------------!
apm_iterate=.FALSE.,.FALSE.  ! If .TRUE., applies the APM to the i-th object
                    ! Note that if reflect_particles_x= .TRUE. and the
                    ! star mass ratio is in [0.995,1.005], the particles
                    ! on the second star will be the reflection about the yz
                    ! plane of the particles on the first star, irrespectively
                    ! of the value of apm_iterate
                    ! It has to have a value for each matter object in the
                    ! system (e.g.: apm_iterate=.TRUE.,.TRUE. for a BNS)
print_step= 50          ! Every print_step steps, print the particle positions
                        ! at the current step, and the particle positions at
                        ! the (current - print_step) step, to a formatted file.
                        ! This allows the user to monitor the APM evolution
                        ! Set to 0 to not print positions at all
apm_max_it= 1        ! Maximum number of iterations, irrespective of the
                        ! EXIT condition
max_inc= 500            ! Sets the EXIT condition: If the average over all the
                        ! particles of the relative error in the density estimate
                        ! grows max_inc times, exit the iteration.
nuratio_thres= 2.0D0    ! Maximum mass ratio (equivalently baryon number ratio)
                        ! to be used in the one-time-only final correction
                        ! of the particle masses to match the star density even
                        ! better (without moving the particles)
nuratio_des= 1.45D0      ! Sets the EXIT condition: If the baryon number ratio
                        ! is within 2.5% of nuratio_des, exit the iteration
                        ! Set nuratio_des to 0 to deactivate and exit the APM
                        ! iteration using max_inc
mass_it=.FALSE.         ! If .TRUE. performs a second iteration without moving
                        ! the particles, changing their mass in order to match
                        ! the star density better. The baryon number ratio grows
                        ! fast in all the tried experiments, hence the
                        ! suggested value is .FALSE.
use_pressure=.TRUE.     ! If .TRUE., uses the physical pressure computed with
                        ! the EOS using the SPH estimate of the density, to
                        ! compute the artificial pressure. Otherwise, the
                        ! density variable N* is used
adapt_ghosts=.FALSE.    ! If .TRUE., the ghost particles will be placed and have
                        ! a baryon number such to reproduce the density of the
                        ! outermost layers (r > 99% of the minimum radius) of
                        ! the object. If .TRUE., the parameters nx_gh, ny_gh,
                        ! nz_gh, ghost_dist below are ignored; if .FALSE., they
                        ! are instead used to place the ghost particles       
move_away_ghosts=.TRUE. ! If .TRUE., the ghost particles will slowly move away
                        ! from the surface of the star during the iteration
                        ! (depending on the EXIT condition chosen, this happens
                        ! in slightly different ways), to allow for the real
                        ! particles to get closer to the surface
nx_gh=250               ! Number of lattice points in the x direction for ghosts
ny_gh=250               ! Number of lattice points in the y direction for ghosts
nz_gh=250               ! Number of lattice points in the z direction for ghosts
ghost_dist=0.45       ! Distance between the ghost particles and the surface
                        ! of the matter object considered (star, ejecta, etc...)
                        ! Typical values range from ~0.15 to ~0.45. Usually,
                        ! higher resolutions may require values closer to 0.45,
                        ! and lower resolutions values closer to 0.15
use_atmosphere=.FALSE.   ! If .TRUE., allows particles to move where the density
                        ! is 0, and displace them using only the smoothing term
                        ! This can be useful when the system has an irregular
                        ! geometry, as, for example, an ejecta
remove_atmosphere=.FALSE. ! If .TRUE., removes the particles placed where the
                          ! density is 0, at the end of the APM iteration
!---------------------------------------!
! Flag to correct the number of baryons !
!---------------------------------------!
correct_nu=.TRUE.  ! If .TRUE., the baryon number per particle nu is corrected
                   ! to include the total baryonic masses of the
                   ! stars.
!--------------------------------------------------------------------------!
! Parameters needed to read the electron fraction when using a CompOSE EoS !
! CHECK THAT THE EOS CHOSEN HERE IS THE CORRECT ONE FOR THE ID FILE CHOSEN !
! IN THE OTHER PARAMETER FILE sphincs_id_parameters.dat                    !
!--------------------------------------------------------------------------!
compose_eos=.FALSE. ! If .TRUE., assigns values to Ye (electron fraction)
                   ! as a function of rho (baryon mass density).
                   ! The values are computed via linear interpolation
                   ! using the CompOSE tabulated EOS.

/
