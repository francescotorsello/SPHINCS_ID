################################################################################
# SConstruct file to build SPHINCS_ID
# Author:     Francesco Torsello
################################################################################
# Copyright (C) 2020, 2021, 2022 Francesco Torsello
#
# This file is part of SPHINCS_ID
#
# SPHINCS_ID is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# SPHINCS_ID is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with SPHINCS_ID. If not, see <https://www.gnu.org/licenses/>.
# The copy of the GNU General Public License should be in the file
# 'COPYING'.
################################################################################

################################################################################
# ACRONYMS
################################################################################
# ID          : Initial Data
# SPHINCS_ID  : Smoothed Particle Hydrodynamics IN Curved Spacetime - ID builder
################################################################################

import sys
import os
import glob
import socket

################################################################################
# DEFAULT OPTIONS
################################################################################

# A 'flavour' of SPHINCS_ID is defined as a set of its MODULES
# The following flavours are implemented

# Include all the MODULES
full_flavour        = '1'

# Include the MODULES that link to the LORENE library to read the ID, and
# interpolate the ID from a Cartesian, uniform grid
lorene_flavour      = '2'

# Include the MODULES that link to the FUKA library to read the ID, and
# interpolate the ID from a Cartesian, uniform grid
fuka_flavour        = '3'

# Include the MODULES that interpolate from a Cartesian, uniform grid
interpolate_flavour = '4'

# Set the default flavour
default_flavour = full_flavour

# 'TRUE'  : build in DEBUG MODE
# 'FALSE' : build in PRODUCTION MODE
default_debug = 'FALSE'

# Which compilers to use
#   Fortran : 'gfortran', 'ifort'
#   C++     : 'g++', 'gcc' or 'icpc'
default_fortran_compiler = 'ifort'
default_cpp_compiler     = 'icpc'

# 'TRUE'  : enables verbose output
# 'FALSE' : disables verbose output
default_verbose = 'FALSE'

# Specifies the host machine where SPHINCS_ID is used
# 'r3x'     : The r30, r31, r32 machines @ Department of Astronomy,
#             Stockholm University
# 'Sunrise' : The Sunrise HPC cluster @ Fysikum, Stockholm University
#             The following line needs to be added to the user's .bash_profile
#             file, so that the necessary modules are loaded to the user's local
#             environment on Sunrise:
#   module load -openmpi3 +openmpi4 +gsl +fftw +scalapack +libgfortran +pgplot
#             Regarding compilation of FUKA on Sunrise, follow the
#             instructions at (on Sunrise):
#               /cfs/home/pg/CHAP/compile-kadath-scripts/
current_host= socket.gethostname()

if current_host == 'r30' or current_host == 'r31' or current_host == 'r32':
  default_host = 'r3x'
  MPI_ranks    = '40'

elif current_host == 'sol-login.fysik.su.se':
  default_host = 'Sunrise'
  MPI_ranks    = '128'

else:
  default_host = 'r3x'
  MPI_ranks    = '40'

# Version of SPHINCS_ID
version = 'v1.7'

################################################################################

################################################################################
# USEFUL VARIABLES
################################################################################

# Home directory for SPHINCS_ID
working_dir = os.getcwd()

################################################################################

################################################################################
# EXTERNAL LIBRARIES
################################################################################

liblorene_dir = [os.environ['HOME_LORENE'] + '/Lib']
libkadath_dir = [os.environ['HOME_KADATH'] + '/lib']
home_sphincs  = os.environ['HOME_SPHINCS']

################################################################################

################################################################################
# CUSTOM OPTIONS
################################################################################

flavour = ARGUMENTS.get('flavour')
if flavour is None: flavour = default_flavour

debug = ARGUMENTS.get('debug')
if debug is None: debug = default_debug

fortran_compiler = ARGUMENTS.get('fortran_compiler')
if fortran_compiler is None: fortran_compiler = default_fortran_compiler

cpp_compiler = ARGUMENTS.get('cpp_compiler')
if cpp_compiler is None: cpp_compiler = default_cpp_compiler

compilers = ARGUMENTS.get('compilers')
if compilers == 'intel':
    fortran_compiler = 'ifort'
    cpp_compiler     = 'icpc'
if compilers == 'gnu':
    fortran_compiler = 'gfortran'
    cpp_compiler     = 'g++'

verbose = ARGUMENTS.get('verbose')
if verbose is None: verbose = default_verbose

host = ARGUMENTS.get('host')
if host is None: host = default_host

################################################################################

################################################################################
# INITIALIZATION
################################################################################

if fortran_compiler == 'ifort': #

  if host == 'r3x': #

    env = DefaultEnvironment(

      ENV       = { 'PATH'               : os.environ['PATH'],
                    'INTEL_LICENSE_FILE' : os.environ['INTEL_LICENSE_FILE'],
                    'LD_LIBRARY_PATH'    : os.environ['LD_LIBRARY_PATH']  },
      LINK      = 'ifort',
      LINKFLAGS = '-g -qopenmp',
      TOOLS     = ['default', 'ifort']

    )

  if host == 'Sunrise': #

    env = DefaultEnvironment(

      ENV       = { 'PATH'               : os.environ['PATH'],
                    'LD_LIBRARY_PATH'    : os.environ['LD_LIBRARY_PATH']  },
      LINK      = 'ifort',
      LINKFLAGS = '-g -traceback -qopenmp -static-intel -qopenmp-link=static \
                   -static-libgcc -static-libstdc++',
      TOOLS     = ['default', 'ifort']

    )

if fortran_compiler == 'gfortran': #

  env = DefaultEnvironment(

    ENV       = { 'PATH'            : os.environ['PATH'] },
    LINK      = 'gfortran',
    LINKFLAGS = '-g -fopenmp',
    TOOLS     = ['default', 'gfortran']

  )

if verbose == 'FALSE':

  if sys.stdout.isatty():

    env['CXXCOMSTR']  = "\033[92mCompiling\033[0m $TARGET"
    env['F90COMSTR']  = "\033[92mCompiling\033[0m $TARGET"
    env['LINKCOMSTR'] = "\033[94mLinking\033[0m $TARGET"
    env['HDF5COMSTR'] = "\033[95mGenerating\033[0m $TARGET"

  else:

    env['CXXCOMSTR']  = "Compiling $TARGET"
    env['F90COMSTR']  = "Compiling $TARGET"
    env['LINKCOMSTR'] = "Linking $TARGET"
    env['HDF5COMSTR'] = "Generating $TARGET"

################################################################################

################################################################################
# MODULES
################################################################################

module_id_base_dir = ['src/id_base/']
module_id_base = [
  'module_id_base.f90',
  'submodule_id_base_initialization.f90',
  'submodule_id_base_access.f90',
  'submodule_id_base_mass_profile.f90',
  'submodule_id_base_length_scale.f90'
]

module_sph_particles_dir = ['src/sph_particles/']
module_sph_particles = [
  'module_sph_particles.f90',
  'submodule_sph_particles_constructor_std.f90',
  'submodule_sph_particles_constructor_bin.f90',
  'submodule_sph_particles_memory.f90',
  'submodule_sph_particles_lattices.f90',
  'submodule_sph_particles_ellipsoidal_surfaces.f90',
  'submodule_sph_particles_sph_variables.f90',
  'submodule_sph_particles_access.f90',
  'submodule_sph_particles_io.f90',
  'submodule_sph_particles_compose.f90',
  #'submodule_sph_particles_redistribute_nu.f90',
  'submodule_sph_particles_apm.f90',
  'submodule_sph_particles_recovery.f90',
  'submodule_sph_particles_handle_positions.f90',
  'submodule_sph_particles_adm_variables.f90',
  'submodule_sph_particles_quality_indicators.f90'
]

module_standard_tpo_formulation_dir = ['src/standard_tpo_formulation/']
module_standard_tpo_formulation = [
  'module_standard_tpo_formulation.f90',
  'submodule_standard_tpo_formulation_standard_tpo_variables.f90',
  'submodule_standard_tpo_formulation_access.f90',
  'submodule_standard_tpo_formulation_io.f90',
  'submodule_standard_tpo_formulation_recovery.f90',
  'submodule_standard_tpo_formulation_analysis.f90',
  'submodule_standard_tpo_formulation_sph_adm_variables.f90'
]

module_bssn_formulation_dir = \
  ['src/standard_tpo_formulation/bssn_formulation/']
module_bssn_formulation = [
  'module_bssn_formulation.f90',
  'submodule_bssn_formulation_constructor.f90',
  'submodule_bssn_formulation_memory.f90',
  'submodule_bssn_formulation_io.f90',
  'submodule_bssn_formulation_bssn_variables.f90',
  'submodule_bssn_formulation_constraints.f90',
  'submodule_bssn_formulation_ricci.f90',
  'submodule_bssn_formulation_landau_lifshitz.f90'
]

module_bns_base_dir = ['src/id_base/bns_base/']
module_bns_base = [
  'module_bns_base.f90',
  'submodule_bns_base_access.f90',
  'submodule_bns_base_io.f90',
  'submodule_bns_base_find_radii.f90'
]

module_bns_lorene_dir = ['src/id_base/bns_base/bns_lorene/']
module_bns_lorene = [
  'module_bns_lorene.f90',
  'submodule_bns_lorene_constructor.f90',
  'submodule_bns_lorene_read.f90',
  'submodule_bns_lorene_memory.f90',
  'submodule_bns_lorene_access.f90',
  'submodule_bns_lorene_params.f90',
  'submodule_bns_lorene_io.f90',
  'submodule_bns_lorene_finalize_id.f90'
]

module_diffstar_base_dir = ['src/id_base/diffstar_base/']
module_diffstar_base = [
  'module_diffstar_base.f90',
  'submodule_diffstar_base_access.f90',
  'submodule_diffstar_base_io.f90'
]

module_diffstar_lorene_dir = ['src/id_base/diffstar_base/diffstar_lorene/']
module_diffstar_lorene = [
  'module_diffstar_lorene.f90',
  'submodule_diffstar_lorene_constructor.f90',
  'submodule_diffstar_lorene_read.f90',
  'submodule_diffstar_lorene_memory.f90',
  'submodule_diffstar_lorene_access.f90',
  'submodule_diffstar_lorene_params.f90',
  'submodule_diffstar_lorene_io.f90'
]

module_bns_fuka_dir = ['src/id_base/bns_base/bns_fuka/']
module_bns_fuka = [
  'module_bns_fuka.f90',
  'submodule_bns_fuka_constructor.f90',
  'submodule_bns_fuka_read.f90',
  'submodule_bns_fuka_interpolate.f90',
  'submodule_bns_fuka_memory.f90',
  'submodule_bns_fuka_access.f90',
  'submodule_bns_fuka_params.f90',
  'submodule_bns_fuka_io.f90'
]

module_ejecta_generic_dir = ['src/id_base/ejecta_generic/']
module_ejecta_generic = [
  'module_ejecta_generic.f90',
  'submodule_ejecta_generic_constructor.f90',
  'submodule_ejecta_generic_access.f90',
  'submodule_ejecta_generic_memory.f90',
  'submodule_ejecta_generic_io.f90',
  'submodule_ejecta_generic_interpolate.f90'
]

module_sphincs_id_full_dir = ['src/sphincs_id_full/']
module_sphincs_id_full = [
  'module_sphincs_id_full.f90'
]

module_sphincs_id_lorene_dir = ['src/sphincs_id_lorene/']
module_sphincs_id_lorene = [
  'module_sphincs_id_lorene.f90'
]

module_sphincs_id_fuka_dir = ['src/sphincs_id_fuka/']
module_sphincs_id_fuka = [
  'module_sphincs_id_fuka.f90'
]

module_sphincs_id_interpolate_dir = ['src/sphincs_id_interpolate/']
module_sphincs_id_interpolate = [
  'module_sphincs_id_interpolate.f90'
]

module_cauchy_convergence_test_dir = ['src/cauchy_convergence_test/']
module_cauchy_convergence_test = [
  'module_cauchy_convergence_test.f90',
  'submodule_cauchy_convergence_test_shared_grid.f90',
  'submodule_cauchy_convergence_test_perform_test.f90'
]

module_utility_dir = ['src/utility/']
module_utility = [
  'module_utility.f90'
]

for i in range(len(module_id_base)):
  module_id_base[i] = module_id_base_dir[0] + module_id_base[i]

for i in range(len(module_sph_particles)):
  module_sph_particles[i] = module_sph_particles_dir[0] \
                          + module_sph_particles[i]

for i in range(len(module_standard_tpo_formulation)):
  module_standard_tpo_formulation[i] = module_standard_tpo_formulation_dir[0] \
                                     + module_standard_tpo_formulation[i]

for i in range(len(module_bssn_formulation)):
  module_bssn_formulation[i] = module_bssn_formulation_dir[0] \
                               + module_bssn_formulation[i]

for i in range(len(module_bns_base)):
  module_bns_base[i] = module_bns_base_dir[0] + module_bns_base[i]

for i in range(len(module_bns_lorene)):
  module_bns_lorene[i] = module_bns_lorene_dir[0] + module_bns_lorene[i]

for i in range(len(module_diffstar_base)):
  module_diffstar_base[i] = module_diffstar_base_dir[0] \
                          + module_diffstar_base[i]

for i in range(len(module_diffstar_lorene)):
  module_diffstar_lorene[i] = module_diffstar_lorene_dir[0] \
                            + module_diffstar_lorene[i]

for i in range(len(module_bns_fuka)):
  module_bns_fuka[i] = module_bns_fuka_dir[0] + module_bns_fuka[i]

for i in range(len(module_ejecta_generic)):
  module_ejecta_generic[i] = module_ejecta_generic_dir[0] \
                           + module_ejecta_generic[i]

for i in range(len(module_sphincs_id_full)):
  module_sphincs_id_full[i] = module_sphincs_id_full_dir[0] \
                            + module_sphincs_id_full[i]

for i in range(len(module_sphincs_id_lorene)):
  module_sphincs_id_lorene[i] = module_sphincs_id_lorene_dir[0] \
                              + module_sphincs_id_lorene[i]

for i in range(len(module_sphincs_id_fuka)):
  module_sphincs_id_fuka[i] = module_sphincs_id_fuka_dir[0] \
                            + module_sphincs_id_fuka[i]

for i in range(len(module_sphincs_id_interpolate)):
  module_sphincs_id_interpolate[i] = module_sphincs_id_interpolate_dir[0] \
                                   + module_sphincs_id_interpolate[i]

for i in range(len(module_cauchy_convergence_test)):
  module_cauchy_convergence_test[i] = module_cauchy_convergence_test_dir[0] \
                                    + module_cauchy_convergence_test[i]

for i in range(len(module_utility)):
  module_utility[i] = module_utility_dir[0] + module_utility[i]

sources_base = module_id_base + module_bns_base + module_diffstar_base \
             + module_sph_particles + module_standard_tpo_formulation \
             + module_bssn_formulation + module_cauchy_convergence_test \
             + module_utility

#all_modules = [ module_id_base, module_utility, module_sphincs_id_interpolate ]

################################################################################

################################################################################
# SOURCE FILES FROM SPHINCS_BSSN
################################################################################
#'../../../SPHINCS_SP'
env['F90PATH'] = [
  '.',
  home_sphincs + '/BSSN',
  home_sphincs + '/sphincs_repository/SPHINCS_fix_metric',
  home_sphincs + '/sphincs_repository/SPHINCS_BSSN'
]

mesh_dir         = [home_sphincs + '/BSSN/']
sphincs_bssn_dir = [home_sphincs + '/sphincs_repository/SPHINCS_BSSN/']
sphincs_fm_dir   = [home_sphincs + '/sphincs_repository/SPHINCS_fix_metric/']

sources_mesh = [
  'module_mesh_refinement.f90',
  'module_ADM_refine.f90',
  'module_BSSN_refine.f90',
  'module_BSSN_parameters.f90',
  'module_GravityAcceleration_refine.f90',
  'module_McLachlan_refine.f90',
  'module_TOV_refine.f90',
  'module_Tmunu_refine.f90',
  'module_map_metric_2_particles_refine.f90',
  'module_evolution_parameters.f90',
  'submodule_prolongation.f90',
  'submodule_restriction.f90',
  'submodule_utilities.f90',
  'submodule_parameter.f90',
  'submodule_allocation.f90',
  'submodule_output.f90',
  'module_Numerics.f90',
  'module_Hermite_refine.f90',
  'Hermite_3D_Weights.f',
  'Hermite5_3D_Weights.f',
  'module_WENO.f90',
  'ML_BSSN_NV_EvolutionInteriorSplitBy1.cc',
  'ML_BSSN_NV_EvolutionInteriorSplitBy2.cc',
  'ML_BSSN_NV_EvolutionInteriorSplitBy3.cc',
  'ML_BSSN_NV_InitialADMBase1Everywhere.cc',
  'ML_BSSN_NV_InitialADMBase2Interior.cc',
  'ML_BSSN_NV_MatterAccelerationInterior.cc',
  'ML_BSSN_NV_EnforceEverywhere.cc',
  'ML_BSSN_NV_ADMDerivativesInterior.cc',
  'ML_BSSN_NV_ConstraintsInterior.cc',
  'ML_BSSN_NV_ConstraintsInterior_mod.cc',
  'ML_BSSN_NV_RicciInterior.cc',
  'module_Extract_Mass.f90',
  'submodule__Extract_Mass_impl.f90',
  'fermi_step_f.f90',
  'bssn_parameters.cc'
]

sources_sphincs_bssn = [
  'module_CP_distribute.f90',
  'module_MLS.f90',
  'module_SelfRegularization.f90',
  'module_particle_mesh_hash_grid.f90',
  'module_map_particles_2_grid.f90',
  'module_integ_hydro_BSSN.f90',
  'module_gradient.f90',
  'module_timing.f90',
  'module_debug_output.f90',
  'module_dyn_metric_on_particles.f90',
  'module_alive_flag.f90',
  'module_quadrup_GW_extraction.f90',
  'module_LRE.f90'
]

sources_sphincs_fm = [
  'module_files.f90',
  'module_constants.f90',
  'module_units.f90',
  'module_SPHINCS_options.f90',
  'module_boundaries.f90',
  'module_Numerical_Recipes.f90',
  'module_matrix.f90',
  'module_3plus1.f90',
  'module_kernel_table.f90',
  'module_RCB_tree_neighbours.f90',
  'module_SPH_variables.f90',
  'module_analyze.f90',
  'module_EOS.f90',
  'module_set_h.f90',
  'module_tensor.f90',
  'module_BH_params.f90',
  'module_input_output.f90',
  'module_recovery_via_pressure.f90',
  'module_SPHINCS_SPH_v2.f90',
  'module_SPHINCS_version.f90',
  'module_SPHINCS_logbook.f90',
  'module_relativistic_Eigenvalues.f90',
  'module_reconstruction.f90',
  'module_deactivate_particles.f90',
  'module_sorting.f90',
  'module_Finite_Diff_1D.f90',
  'module_Artificial_Pressure_Method.f90',
  'module_piecewise_polytrope.f90'
]

for i in range(len(sources_mesh)):
 sources_mesh[i]           = mesh_dir[0]          + sources_mesh[i]

for i in range(len(sources_sphincs_bssn)):
 sources_sphincs_bssn[i]   = sphincs_bssn_dir[0]  + sources_sphincs_bssn[i]

for i in range(len(sources_sphincs_fm)):
 sources_sphincs_fm[i]     = sphincs_fm_dir[0]    + sources_sphincs_fm[i]

################################################################################

################################################################################

################################################################################
# FLAVOUR= 1. Link to LORENE and Kadath libraries, and interpolate from
#             Cartesian uniform grid

if flavour == full_flavour: #

  build_flavour = '-Dflavour=1'

  if host == 'r3x': #

    env['LIBPATH'] = liblorene_dir + libkadath_dir

    if debug == 'FALSE': #

      env['LIBS'] = ['stdc++', 'm', 'lorene_export', 'lorene', \
                     'lorenef77', 'kadath', 'gsl', 'lapack', 'fftw3', 'blas', \
                     'gslcblas', 'gfortran']

    if debug == 'TRUE': #

      env['LIBS'] = ['stdc++', 'm', 'lorene_export_g', 'lorene_g', \
                     'lorenef77_g', 'kadath-debug', 'gsl', 'lapack', 'fftw3', \
                     'blas', 'gslcblas', 'gfortran']

  if host == 'Sunrise': #

    env['LIBPATH'] = liblorene_dir + libkadath_dir + \
                     ['/opt/ohpc/pub/libs/gnu8/gsl/2.6/lib', \
                      '/opt/ohpc/pub/libs/gnu8/openmpi4/scalapack/2.1.0/lib', \
                      '/opt/ohpc/pub/libs/gnu8/openmpi4/fftw/3.3.8/lib', \
                      '/opt/ohpc/pub/libs/gnu8/openblas/0.3.12/lib']

    if debug == 'FALSE': #

      env['LIBS'] = ['stdc++', 'm', 'lorene_export', 'lorene', \
                     'lorenef77', 'kadath', 'gsl', 'scalapack', 'openblas', \
                     'gslcblas', 'gfortran', 'fftw3']

    if debug == 'TRUE': #

      env['LIBS'] = ['stdc++', 'm', 'lorene_export_g', 'lorene_g', \
                     'lorenef77_g', 'kadath-debug', 'gsl', 'scalapack', \
                     'openblas', 'gslcblas', 'gfortran', 'fftw3']

  sources_flavour = module_bns_lorene + module_diffstar_lorene \
                  + module_bns_fuka \
                  + module_ejecta_generic + module_sphincs_id_full

################################################################################
# FLAVOUR= 2. Link to LORENE library, and interpolate from Cartesian uniform
#             grid

if flavour == lorene_flavour: #

  build_flavour = '-Dflavour=2'

  if host == 'r3x': #

    env['LIBPATH'] = liblorene_dir

    if debug == 'FALSE': #

      env['LIBS'] = ['stdc++', 'm', 'lorene_export', 'lorene', \
                     'lorenef77', 'gsl', 'lapack', 'fftw3', 'blas', \
                     'gslcblas', 'gfortran']

    if debug == 'TRUE': #

      env['LIBS'] = ['stdc++', 'm', 'lorene_export_g', 'lorene_g', \
                     'lorenef77_g', 'gsl', 'lapack', 'fftw3', 'blas', \
                     'gslcblas', 'gfortran']

  if host == 'Sunrise': #

    env['LIBPATH'] = liblorene_dir + \
                     ['/opt/ohpc/pub/libs/gnu8/gsl/2.6/lib', \
                      '/opt/ohpc/pub/libs/gnu8/openmpi4/scalapack/2.1.0/lib', \
                      '/opt/ohpc/pub/libs/gnu8/openmpi4/fftw/3.3.8/lib', \
                      '/opt/ohpc/pub/libs/gnu8/openblas/0.3.12/lib']

    if debug == 'FALSE': #

      env['LIBS'] = ['stdc++', 'm', 'lorene_export', 'lorene', \
                     'lorenef77', 'gsl', 'scalapack', 'openblas', \
                     'gslcblas', 'gfortran', 'fftw3']

    if debug == 'TRUE': #

      env['LIBS'] = ['stdc++', 'm', 'lorene_export_g', 'lorene_g', \
                     'lorenef77_g', 'gsl', 'scalapack', 'openblas', \
                     'gslcblas', 'gfortran', 'fftw3']

  sources_flavour = module_bns_lorene + module_diffstar_lorene \
                  + module_ejecta_generic + module_sphincs_id_lorene

################################################################################
# FLAVOUR= 3. Link to Kadath library, and interpolate from Cartesian uniform
#             grid

if flavour == fuka_flavour: #

  build_flavour = '-Dflavour=3'

  if host == 'r3x': #

    env['LIBPATH'] = libkadath_dir

    if debug == 'FALSE': #

      env['LIBS'] = ['stdc++', 'm', 'kadath', 'gsl', 'fftw3', 'lapack']

    if debug == 'TRUE': #

      env['LIBS'] = ['stdc++', 'm', 'kadath-debug', 'gsl', 'fftw3', 'lapack']

  if host == 'Sunrise': #

    env['LIBPATH'] = libkadath_dir + \
                     ['/opt/ohpc/pub/libs/gnu8/gsl/2.6/lib', \
                      '/opt/ohpc/pub/libs/gnu8/openmpi4/scalapack/2.1.0/lib', \
                      '/opt/ohpc/pub/libs/gnu8/openmpi4/fftw/3.3.8/lib', \
                      '/opt/ohpc/pub/libs/gnu8/openblas/0.3.12/lib']

    if debug == 'FALSE': #

      env['LIBS'] = ['stdc++', 'm', 'kadath', 'gsl', 'scalapack', 'openblas', \
                     'fftw3']

    if debug == 'TRUE': #

      env['LIBS'] = ['stdc++', 'm', 'kadath', 'gsl', 'scalapack', 'openblas', \
                     'fftw3']

  sources_flavour = module_bns_fuka \
                    + module_ejecta_generic + module_sphincs_id_fuka

################################################################################
# FLAVOUR= 4. Interpolate data from a grid. Do not link to LORENE library

if flavour == interpolate_flavour: #

  build_flavour= '-Dflavour=4'

  env['LIBS'] = ['stdc++', 'm']

  sources_flavour = module_ejecta_generic + module_sphincs_id_interpolate

################################################################################

################################################################################
# BUILD OPTIONS
################################################################################

env['F90FILESUFFIXES']=['.f90','.f']

build_version = '-Dvers='        + version
build_mpi     = '-DMPI_ranks='   + MPI_ranks
build_dir     = '-Dworking_dir=' + working_dir
build_host    = '-Dhost='        + host

# Fortran compiler
env['F90'] = fortran_compiler

# C++ compiler
env['CXX'] = cpp_compiler

if debug == 'FALSE': #

  if host == 'r3x': #

    ############################################################################
    # FORTRAN PRODUCTION BUILD OPTIONS
    ############################################################################
    if fortran_compiler == 'ifort':

      env['F90FLAGS'] = [ '-O3', '-qopenmp', '-qoverride-limits', '-xHOST', \
                          '-heap-arrays', '-qopt-report', \
                          '-qopt-report-phase=vec,openmp', '-no-wrap-margin', \
                          '-warn', '-CB', '-CS', '-g', '-traceback', '-fpp', \
                          build_flavour, build_mpi, build_dir, build_host, \
                          build_version ]
#, '-CB', '-CS', '-g', '-traceback'
    if fortran_compiler == 'gfortran':

      env['F90FLAGS'] = [ '-O2', '-fopenmp', '-ftree-vectorize', \
                          '-fopt-info-vec', '-fdollar-ok', '-fbounds-check', \
                          '-fopt-info-loop', '-g', '-fbacktrace', '-cpp', \
                          '-ffree-line-length-none', \
                          '-ffixed-line-length-none', \
                          '-Wall', '-Wextra', '-Wimplicit-interface', \
                          '-Wimplicit-procedure', build_flavour, build_mpi, \
                          build_dir, build_host, build_version ]

    ############################################################################
    # C++ PRODUCTION BUILD OPTIONS
    ############################################################################
    if cpp_compiler == 'icpc':

      env['CXXFLAGS'] = [ '-O3', '-g', '-std=c++11', '-qopenmp', '-xHOST', \
                          '-qopt-report', '-qopt-report-phase=vec,openmp', \
                          '-Wall', '-m64', '-DNDEBUG', '-pedantic', '-Wall', \
                          '-W', '-Wundef', '-Wshadow', '-Wcast-qual', \
                          '-Wconversion', '-Winline', '-Woverloaded-virtual' ]
      #-ip, -ipo, -ipo=n
      # icx compiler: best of icc and best of clang
      # -o prog

    if cpp_compiler == 'gcc' or cpp_compiler == 'g++':

      env['CXXFLAGS'] = [ '-O3', '-g', '-std=c++11', '-fopenmp', '-Wall', \
                          '-ftree-vectorize','-fopt-info-vec', \
                          '-fopt-info-loop',\
                          '-m64', '-DNDEBUG', '-pedantic', '-Wall', \
                          '-Wundef', '-Wshadow', '-Wcast-qual', '-Wcast-align',\
                          '-Wconversion', '-Winline', '-Wabi=11', \
                          '-Wold-style-cast', '-Woverloaded-virtual', \
                          '-Wfatal-errors' ]

  if host == 'Sunrise': #

    ############################################################################
    # FORTRAN PRODUCTION BUILD OPTIONS
    ############################################################################
    if fortran_compiler == 'ifort':

      env['F90FLAGS'] = [ '-O3', '-qopenmp', '-qoverride-limits', \
                          '-heap-arrays', '-qopt-report', \
                          '-qopt-report-phase=vec,openmp', '-no-wrap-margin', \
                          '-warn', '-CB', '-CS', '-fpp', \
                          '-diag-disable=10346', '-static-intel', \
                          '-qopenmp-link=static', '-static', '-xHOST', \
                          '-align array64byte', \
                          build_flavour, build_mpi, build_dir, build_host, \
                          build_version ]
#, '-g', '-CB', '-CS', '-traceback'
    if fortran_compiler == 'gfortran':

      env['F90FLAGS'] = [ '-O2', '-fopenmp', '-ftree-vectorize', \
                          '-fopt-info-vec', '-fdollar-ok', '-fbounds-check', \
                          '-fopt-info-loop', '-g', '-fbacktrace', '-cpp', \
                          '-ffree-line-length-none', \
                          '-ffixed-line-length-none', \
                          '-Wall', '-Wextra', '-Wimplicit-interface', \
                          '-Wimplicit-procedure', build_flavour, build_mpi, \
                          build_dir, build_host, build_version ]

    ############################################################################
    # C++ PRODUCTION BUILD OPTIONS
    ############################################################################
    if cpp_compiler == 'icpc':

      env['CXXFLAGS'] = [ '-O3', '-g', '-std=c++11', '-qopenmp', '-xHOST', \
                          '-qopt-report', '-qopt-report-phase=vec,openmp', \
                          '-Wall', '-m64', '-DNDEBUG', '-pedantic',
                          '-traceback', '-diag-disable=10397', \
                          '-qoverride-limits', '-static-intel', \
                          '-qopenmp-link=static', '-static', '-fma']
      #-ip, -ipo, -ipo=n
      # icx compiler: best of icc and best of clang
      # -o prog

    if cpp_compiler == 'gcc' or cpp_compiler == 'g++':

      env['CXXFLAGS'] = [ '-O3', '-g', '-std=c++11', '-fopenmp', \
                          '-ftree-vectorize','-fopt-info-vec', \
                          '-fopt-info-loop',\
                          '-m64', '-DNDEBUG', '-pedantic', '-Wall', \
                          '-Wundef', '-Wshadow', '-Wcast-qual', '-Wcast-align',\
                          '-Wconversion', '-Winline', '-Wabi=11', \
                          '-Wold-style-cast', '-Woverloaded-virtual', \
                          '-Wfatal-errors' ]

if debug == 'TRUE': #

  if host == 'r3x': #

    ############################################################################
    # FORTRAN DEBUG BUILD OPTIONS
    ############################################################################
    if fortran_compiler == 'ifort':

      env['F90FLAGS'] = [ '-O0', '-g', '-qopenmp', '-qoverride-limits', \
                          '-xHOST', '-heap-arrays', '-qopt-report', \
                          '-qopt-report-phase=vec,openmp', '-no-wrap-margin', \
                          '-CB', '-CS', '-traceback', '-fpe0', '-warn', \
                          '-debug extended', '-fpp', build_flavour, build_mpi, \
                          build_dir, build_host, build_version ]

      # More F90 flags for debugging
      #env['F90FLAGS'] = [ '-r8','-g','-qopenmp','-O0', '-ftz', \
      #                    '-heap-arrays 5000', '-fno-alias', '-traceback', \
      #                    '-debug', '-debug all', '-nolib-inline', \
      #                    '-align all',\
      #                    '-check bounds', '-fno-inline-functions', \
      #                    '-prec-div',\
      #                    '-prec-sqrt', '-fp-stack-check', \
      #                    '-init=snan,arrays', \
      #                    '-traceback', '-fPIC', '-fpe3', '-heap-arrays 32', \
      #                    '-assume realloc_lhs', \
      #                    '-assume protect_parens,minus0',\
      #                    '-assume no old_maxminloc', '-warn unused', \
      #                    '-align dcommons',  '-xHOST', '-qopt-report', \
      #                    '-qopt-report-phase=vec,openmp', '-fp-model strict', \
      #                    '-no-wrap-margin', '-ftrapuv', '-mp' ]

    if fortran_compiler == 'gfortran':

      env['F90FLAGS'] = [ '-O0', '-g3', '-fopenmp', '-ftree-vectorize', \
                          '-fopt-info-vec', '-fopt-info-loop', '-fbacktrace', \
                          '-ftrapping-math', '-fbounds-check', \
                          '-ffpe-trap=zero,overflow,underflow', \
                          '-Wuninitialized','-W','-Wall', '-Wextra', '-cpp', \
                          '-ffree-line-length-none', \
                          '-ffixed-line-length-none', '-fdollar-ok', \
                          build_flavour, build_mpi, build_dir, build_host, \
                          build_version ]

    ############################################################################
    # C++ DEBUG BUILD OPTIONS
    ############################################################################
    if cpp_compiler == 'icpc':

      # C++ flags for debugging
      # See also https://www.nas.nasa.gov/hecc/support/kb/recommended-intel-compiler-debugging-options_92.html
      env['CXXFLAGS'] = [ '-O0', '-g', '-std=c++11', '-qopenmp', '-xHOST', \
                          '-qopt-report', '-qopt-report-phase=vec,openmp', \
                          '-Wall', '-m64', '-pedantic', '-Wall', '-Wundef',\
                          '-Wshadow', '-Wcast-qual', '-Wcast-align', \
                          '-Wconversion', '-Winline', '-Wabi=11', \
                          '-Wold-style-cast', '-Woverloaded-virtual', \
                          '-traceback', '-check-uninit', '-ftrapuv', '-debug', \
                          '-debug extended', '-fpe3', '-mp', \
                          '-fp-model strict', \
                          '-align all', '-check bounds', '-assume realloc_lhs',\
                          '-assume protect_parens,minus0', \
                          '-assume no old_maxminloc', '-warn unused', \
                          '-align dcommons' ]

    if cpp_compiler == 'gcc' or cpp_compiler == 'g++':

      env['CXXFLAGS'] = [ '-O0', '-g3', '-std=c++11', '-fopenmp', '-Wall', \
                          '-ftree-vectorize','-fopt-info-vec', \
                          '-fopt-info-loop',\
                          '-m64', '-pedantic', '-Wall', \
                          '-Wundef', '-Wshadow', '-Wcast-qual', '-Wcast-align',\
                          '-Wconversion', '-Winline', '-Wabi=11', \
                          '-Wold-style-cast', '-Woverloaded-virtual', \
                          '-Wfatal-errors' ]

  if host == 'Sunrise': #

    ############################################################################
    # FORTRAN DEBUG BUILD OPTIONS
    ############################################################################
    if fortran_compiler == 'ifort':

      env['F90FLAGS'] = [ '-O0', '-g', '-qopenmp', '-qoverride-limits', \
                          '-heap-arrays', '-qopt-report', \
                          '-qopt-report-phase=vec,openmp', '-no-wrap-margin', \
                          '-CB', '-CS', '-traceback', '-fpe0', '-warn', \
                          '-debug extended', '-fpp', '-diag-disable=10346', \
                          '-static-intel', \
                          '-qopenmp-link=static', '-static', '-xHOST', \
                          '-align array64byte', build_flavour, build_mpi, \
                          build_dir, build_host, build_version ]

      # More F90 flags for debugging
      #env['F90FLAGS'] = [ '-r8','-g','-qopenmp','-O0', '-ftz', \
      #                    '-heap-arrays 5000', '-fno-alias', '-traceback', \
      #                    '-debug', '-debug all', '-nolib-inline', \
      #                    '-align all',\
      #                    '-check bounds', '-fno-inline-functions', \
      #                    '-prec-div',\
      #                    '-prec-sqrt', '-fp-stack-check', \
      #                    '-init=snan,arrays', \
      #                    '-traceback', '-fPIC', '-fpe3', '-heap-arrays 32', \
      #                    '-assume realloc_lhs', \
      #                    '-assume protect_parens,minus0',\
      #                    '-assume no old_maxminloc', '-warn unused', \
      #                    '-align dcommons',  '-xHOST', '-qopt-report', \
      #                    '-qopt-report-phase=vec,openmp', '-fp-model strict', \
      #                    '-no-wrap-margin', '-ftrapuv', '-mp' ]

    if fortran_compiler == 'gfortran':

      env['F90FLAGS'] = [ '-O0', '-g3', '-fopenmp', '-ftree-vectorize', \
                          '-fopt-info-vec', '-fopt-info-loop', '-fbacktrace', \
                          '-ftrapping-math', '-fbounds-check', \
                          '-ffpe-trap=zero,overflow,underflow', \
                          '-Wuninitialized','-W','-Wall', '-Wextra', '-cpp', \
                          '-ffree-line-length-none', \
                          '-ffixed-line-length-none', '-fdollar-ok', \
                          build_flavour, build_mpi, build_dir, build_host, \
                          build_version ]

    ############################################################################
    # C++ DEBUG BUILD OPTIONS
    ############################################################################
    if cpp_compiler == 'icpc':

      # C++ flags for debugging
      # See also https://www.nas.nasa.gov/hecc/support/kb/recommended-intel-compiler-debugging-options_92.html
      env['CXXFLAGS'] = [ '-O0', '-g', '-std=c++11', '-qopenmp', '-xHOST', \
                          '-qopt-report', '-qopt-report-phase=vec,openmp', \
                          '-Wall', '-m64', '-pedantic', '-Wall', '-Wundef',\
                          '-Wshadow', '-Wcast-qual', '-Wcast-align', \
                          '-Wconversion', '-Winline', '-Wabi=11', \
                          '-Wold-style-cast', '-Woverloaded-virtual', \
                          '-traceback', '-check-uninit', '-ftrapuv', '-debug', \
                          '-debug extended', '-fpe3', '-mp', \
                          '-fp-model strict', \
                          '-align all', '-check bounds', '-assume realloc_lhs',\
                          '-assume protect_parens,minus0', \
                          '-assume no old_maxminloc', '-warn unused', \
                          '-align dcommons', '-diag-disable=10397', \
                          '-qoverride-limits', '-static-intel', \
                          '-qopenmp-link=static', '-static', '-fma' ]

    if cpp_compiler == 'gcc' or cpp_compiler == 'g++':

      env['CXXFLAGS'] = [ '-O0', '-g3', '-std=c++11', '-fopenmp', '-Wall', \
                          '-ftree-vectorize','-fopt-info-vec', \
                          '-fopt-info-loop',\
                          '-m64', '-pedantic', '-Wall', \
                          '-Wundef', '-Wshadow', '-Wcast-qual', '-Wcast-align',\
                          '-Wconversion', '-Winline', '-Wabi=11', \
                          '-Wold-style-cast', '-Woverloaded-virtual', \
                          '-Wfatal-errors' ]

################################################################################

################################################################################
# PROGRAMS
################################################################################

sphincs_id       = 'sphincs_id_'       + version + '.x'
convergence_test = 'convergence_test_' + version + '.x'
write_par_eos    = 'write_par_eos_'    + version + '.x'

program_sphincs_id       = ['src/sphincs_id.f90']
program_convergence_test = ['src/convergence_test.f90']
program_write_par_eos    = ['src/write_par_eos.f90']

################################################################################

################################################################################
# BUILD COMMANDS
################################################################################

Progress('Evaluating $TARGET\n')

Program( sphincs_id, \
         sources_base + sources_flavour + sources_mesh + sources_sphincs_fm \
         + sources_sphincs_bssn + program_sphincs_id )

Program( convergence_test, \
         sources_base + sources_flavour + sources_mesh + sources_sphincs_fm \
         + sources_sphincs_bssn + program_convergence_test )

Program( write_par_eos, \
         sources_base + sources_flavour + sources_mesh + sources_sphincs_fm \
         + sources_sphincs_bssn + program_write_par_eos )

################################################################################
#
Decider('MD5-timestamp')
