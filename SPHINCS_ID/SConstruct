################################################################################
# SConstruct file to build SPHINCS_ID
# Author:     Francesco Torsello
################################################################################
# Copyright (C) 2020, 2021, 2022 Francesco Torsello
#
# This file is part of SPHINCS_ID
#
# SPHINCS_ID is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# SPHINCS_ID is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with SPHINCS_ID. If not, see <https://www.gnu.org/licenses/>.
# The copy of the GNU General Public License should be in the file
# 'COPYING'.
################################################################################

################################################################################
# ACRONYMS
################################################################################
# ID          : Initial Data
# SPHINCS_ID  : Smoothed Particle Hydrodynamics IN Curved Spacetime - ID builder
################################################################################

import sys
import os
import glob

################################################################################
# DEFAULT OPTIONS
################################################################################

# The following flavours are implemented
#   '1' : Link to the LORENE library to read the ID
#   '2' : Interpolate from a grid
default_flavour = '1'

# 'TRUE'  : build in DEBUG MODE
# 'FALSE' : build in PRODUCTION MODE
default_debug = 'FALSE'

# Which compilers to use
#   Fortran : 'gfortran', 'ifort'
#   C++     : 'g++', 'gcc' or 'icpc'
default_fortran_compiler = 'ifort'
default_cpp_compiler     = 'icpc'

# 'TRUE'  : enables verbose output
# 'FALSE' : disables verbose output
default_verbose = 'FALSE'

# Version of SPHINCS_ID
version = '_v1.0'

################################################################################

################################################################################
# CUSTOM OPTIONS
################################################################################

flavour = ARGUMENTS.get('flavour')
if flavour is None: flavour = default_flavour

debug = ARGUMENTS.get('debug')
if debug is None: debug = default_debug

fortran_compiler = ARGUMENTS.get('fortran_compiler')
if fortran_compiler is None: fortran_compiler = default_fortran_compiler

cpp_compiler = ARGUMENTS.get('cpp_compiler')
if cpp_compiler is None: cpp_compiler = default_cpp_compiler

verbose = ARGUMENTS.get('verbose')
if verbose is None: verbose = default_verbose

################################################################################

################################################################################
# INITIALIZATION
################################################################################

if fortran_compiler == 'ifort': #

  env = DefaultEnvironment(

    ENV       = { 'PATH'               : os.environ['PATH'],
                  'INTEL_LICENSE_FILE' : os.environ['INTEL_LICENSE_FILE'],
                  'LD_LIBRARY_PATH'    : os.environ['LD_LIBRARY_PATH']  },
    LINK      = 'ifort',
    LINKFLAGS = '-g -qopenmp',
    TOOLS     = ['default', 'ifort']

  )

if fortran_compiler == 'gfortran': #

  env = DefaultEnvironment(

    ENV       = { 'PATH' : os.environ['PATH'] },
    LINK      = 'gfortran',
    LINKFLAGS = '-g -fopenmp',
    TOOLS     = ['default', 'gfortran']

  )

# Pretty output
if verbose == 'FALSE':

  if sys.stdout.isatty():

    env['CXXCOMSTR']  = "\033[92mCompiling\033[0m $TARGET"
    env['F90COMSTR']  = "\033[92mCompiling\033[0m $TARGET"
    env['LINKCOMSTR'] = "\033[94mLinking\033[0m $TARGET"
    env['HDF5COMSTR'] = "\033[95mGenerating\033[0m $TARGET"

  else:

    env['CXXCOMSTR']  = "Compiling $TARGET"
    env['F90COMSTR']  = "Compiling $TARGET"
    env['LINKCOMSTR'] = "Linking $TARGET"
    env['HDF5COMSTR'] = "Generating $TARGET"

################################################################################

################################################################################
# MODULES
################################################################################

module_id_base = [
  'src/id_base/module_id_base.f90',
  'src/id_base/submodule_id_base_initialization.f90',
  'src/id_base/submodule_id_base_access.f90',
  'src/id_base/submodule_id_base_mass_profile.f90'
]

module_sph_particles = [
  'src/sph_particles/module_sph_particles.f90',
  'src/sph_particles/submodule_sph_particles_constructor.f90',
  'src/sph_particles/submodule_sph_particles_memory.f90',
  'src/sph_particles/submodule_sph_particles_lattices.f90',
  'src/sph_particles/submodule_sph_particles_spherical_surfaces.f90',
  'src/sph_particles/submodule_sph_particles_sph_variables.f90',
  'src/sph_particles/submodule_sph_particles_access.f90',
  'src/sph_particles/submodule_sph_particles_io.f90',
  'src/sph_particles/submodule_sph_particles_compose.f90',
  #'src/sph_particles/submodule_sph_particles_redistribute_nu.f90',
  'src/sph_particles/submodule_sph_particles_apm.f90'
]

module_formul_3p1_id = [
  'src/standard_tpo_formulation/module_standard_tpo_formulation.f90',
  'src/standard_tpo_formulation/submodule_standard_tpo_formulation_standard_tpo_variables.f90',
  'src/standard_tpo_formulation/submodule_standard_tpo_formulation_access.f90',
  'src/standard_tpo_formulation/submodule_standard_tpo_formulation_io.f90',
  'src/standard_tpo_formulation/submodule_standard_tpo_formulation_analysis.f90'
]

module_bssn_id = [
  'src/standard_tpo_formulation/bssn_formulation/module_bssn_formulation.f90',
  'src/standard_tpo_formulation/bssn_formulation/submodule_bssn_formulation_constructor.f90',
  'src/standard_tpo_formulation/bssn_formulation/submodule_bssn_formulation_bssn_variables.f90',
  'src/standard_tpo_formulation/bssn_formulation/submodule_bssn_formulation_constraints.f90',
  'src/standard_tpo_formulation/bssn_formulation/submodule_bssn_formulation_memory.f90'
]

module_bns_base = [
  'src/id_base/bns_base/module_bns_base.f90',
  'src/id_base/bns_base/submodule_bns_base_access.f90',
  'src/id_base/bns_base/submodule_bns_base_io.f90'
]

module_bns_lorene = [
  'src/id_base/bns_base/bns_lorene/module_bns_lorene.f90',
  'src/id_base/bns_base/bns_lorene/submodule_bns_lorene_constructor.f90',
  'src/id_base/bns_base/bns_lorene/submodule_bns_lorene_import.f90',
  'src/id_base/bns_base/bns_lorene/submodule_bns_lorene_memory.f90',
  'src/id_base/bns_base/bns_lorene/submodule_bns_lorene_access.f90',
  'src/id_base/bns_base/bns_lorene/submodule_bns_lorene_params.f90',
  'src/id_base/bns_base/bns_lorene/submodule_bns_lorene_io.f90'
]

module_diffstar_base = [
  'src/id_base/diffstar_base/module_diffstar_base.f90',
  'src/id_base/diffstar_base/submodule_diffstar_base_access.f90',
  'src/id_base/diffstar_base/submodule_diffstar_base_io.f90'
]

module_diffstar_lorene = [
  'src/id_base/diffstar_base/diffstar_lorene/module_diffstar_lorene.f90',
  'src/id_base/diffstar_base/diffstar_lorene/submodule_diffstar_lorene_constructor.f90',
  'src/id_base/diffstar_base/diffstar_lorene/submodule_diffstar_lorene_import.f90',
  'src/id_base/diffstar_base/diffstar_lorene/submodule_diffstar_lorene_memory.f90',
  'src/id_base/diffstar_base/diffstar_lorene/submodule_diffstar_lorene_access.f90',
  'src/id_base/diffstar_base/diffstar_lorene/submodule_diffstar_lorene_params.f90',
  'src/id_base/diffstar_base/diffstar_lorene/submodule_diffstar_lorene_io.f90'
]

module_ejecta_generic = [
  'src/id_base/ejecta_generic/module_ejecta_generic.f90',
  'src/id_base/ejecta_generic/submodule_ejecta_generic_constructor.f90',
  'src/id_base/ejecta_generic/submodule_ejecta_generic_access.f90',
  'src/id_base/ejecta_generic/submodule_ejecta_generic_memory.f90',
  'src/id_base/ejecta_generic/submodule_ejecta_generic_io.f90',
  'src/id_base/ejecta_generic/submodule_ejecta_generic_interpolate.f90'
]

module_sphincs_id_lorene = [
  'src/sphincs_id_lorene/module_sphincs_id_lorene.f90'
]

module_sphincs_id_interpolate = [
  'src/sphincs_id_interpolate/module_sphincs_id_interpolate.f90'
]

module_utility = [
  'src/utility/module_utility.f90'
]

sources_base = module_id_base + module_bns_base + module_diffstar_base \
               + module_sph_particles + module_formul_3p1_id + module_bssn_id \
               + module_utility

################################################################################

################################################################################
# SOURCE FILES FROM SPHINCS_BSSN
################################################################################

env['F90PATH'] = [
  '.', '../../BSSN', '../SPHINCS_fix_metric', "../SPHINCS_BSSN"
]

#env['CPPPATH'] = [
#  '../../../Lorene/Export/C++/Include', '../../../Lorene/C++/Include'
#]

sources_mesh = [
  '../../BSSN/module_mesh_refinement.f90',
  #'../../BSSN/module_ADM.f90',
  '../../BSSN/module_ADM_refine.f90',
  #'../../BSSN/module_BSSN.f90',
  '../../BSSN/module_BSSN_refine.f90',
  '../../BSSN/module_BSSN_parameters.f90',
  #'../../BSSN/module_GravityAcceleration.f90',
  '../../BSSN/module_GravityAcceleration_refine.f90',
  #'../../BSSN/module_McLachlan.f90',
  '../../BSSN/module_McLachlan_refine.f90',
  #'../../BSSN/module_TOV.f90',
  '../../BSSN/module_TOV_refine.f90',
  #'../../BSSN/module_Tmunu.f90',
  '../../BSSN/module_Tmunu_refine.f90',
  #'../../BSSN/module_gravity_grid.f90',
  #'../../BSSN/module_map_metric_2_particles.f90',
  '../../BSSN/module_map_metric_2_particles_refine.f90',
  '../../BSSN/module_evolution_parameters.f90',
  '../../BSSN/submodule_prolongation.f90',
  '../../BSSN/submodule_restriction.f90',
  '../../BSSN/submodule_utilities.f90',
  '../../BSSN/submodule_parameter.f90',
  '../../BSSN/submodule_allocation.f90',
  '../../BSSN/submodule_output.f90',
  #'../../BSSN/module_tensor.f90',
  '../../BSSN/module_Numerics.f90',
  '../../BSSN/module_Hermite_refine.f90',
  '../../BSSN/Hermite_3D_Weights.f',
  '../../BSSN/Hermite5_3D_Weights.f',
  '../../BSSN/module_WENO.f90',
  '../../BSSN/ML_BSSN_NV_EvolutionInteriorSplitBy1.cc',
  '../../BSSN/ML_BSSN_NV_EvolutionInteriorSplitBy2.cc',
  '../../BSSN/ML_BSSN_NV_EvolutionInteriorSplitBy3.cc',
  '../../BSSN/ML_BSSN_NV_InitialADMBase1Everywhere.cc',
  '../../BSSN/ML_BSSN_NV_InitialADMBase2Interior.cc',
  '../../BSSN/ML_BSSN_NV_MatterAccelerationInterior.cc',
  '../../BSSN/ML_BSSN_NV_EnforceEverywhere.cc',
  '../../BSSN/ML_BSSN_NV_ADMDerivativesInterior.cc',
  '../../BSSN/ML_BSSN_NV_ConstraintsInterior.cc',
  '../../BSSN/ML_BSSN_NV_ConstraintsInterior_mod.cc',
  '../../BSSN/module_Extract_Mass.f90',
  '../../BSSN/submodule__Extract_Mass_impl.f90',
  '../../BSSN/fermi_step_f.f90',
  '../../BSSN/bssn_parameters.cc'
  #'../../BSSN/module_NaNChecker.f90'
]

sources_sphincs_bssn = [
  '../SPHINCS_BSSN/module_CP_distribute.f90',
  '../SPHINCS_BSSN/module_MLS.f90',
  '../SPHINCS_BSSN/module_SelfRegularization.f90',
  '../SPHINCS_BSSN/module_particle_mesh.f90',
  '../SPHINCS_BSSN/module_particle_mesh_hash_grid.f90',
  '../SPHINCS_BSSN/module_map_particles_2_grid.f90',
  '../SPHINCS_BSSN/module_integ_hydro_BSSN.f90',
  #'../SPHINCS_BSSN/module_grid_output.f90',
  '../SPHINCS_BSSN/module_gradient.f90',
  '../SPHINCS_BSSN/module_timing.f90',
  '../SPHINCS_BSSN/module_debug_output.f90',
  #'../SPHINCS_BSSN/module_grav_acc_check.f90',
  '../SPHINCS_BSSN/module_dyn_metric_on_particles.f90',
  '../SPHINCS_BSSN/module_alive_flag.f90',
  '../SPHINCS_BSSN/module_quadrup_GW_extraction.f90'
]

sources_sphincs_fm = [
  '../SPHINCS_fix_metric/module_files.f90',
  '../SPHINCS_fix_metric/module_constants.f90',
  '../SPHINCS_fix_metric/module_units.f90',
  '../SPHINCS_fix_metric/module_SPHINCS_options.f90',
  '../SPHINCS_fix_metric/module_boundaries.f90',
  '../SPHINCS_fix_metric/module_Numerical_Recipes.f90',
  '../SPHINCS_fix_metric/module_matrix.f90',
  '../SPHINCS_fix_metric/module_3plus1.f90',
  '../SPHINCS_fix_metric/module_kernel_table.f90',
  '../SPHINCS_fix_metric/module_RCB_tree_neighbours.f90',
  '../SPHINCS_fix_metric/module_SPH_variables.f90',
  '../SPHINCS_fix_metric/module_analyze.f90',
  '../SPHINCS_fix_metric/module_EOS.f90',
  '../SPHINCS_fix_metric/module_set_h.f90',
  '../SPHINCS_fix_metric/module_tensor.f90',
  '../SPHINCS_fix_metric/module_BH_params.f90',
  '../SPHINCS_fix_metric/module_input_output.f90',
  '../SPHINCS_fix_metric/module_recovery_via_pressure.f90',
  '../SPHINCS_fix_metric/module_SPHINCS_SPH_v2.f90',
  '../SPHINCS_fix_metric/module_SPHINCS_version.f90',
  '../SPHINCS_fix_metric/module_SPHINCS_logbook.f90',
  '../SPHINCS_fix_metric/module_relativistic_Eigenvalues.f90',
  '../SPHINCS_fix_metric/module_reconstruction.f90',
  '../SPHINCS_fix_metric/module_deactivate_particles.f90',
  '../SPHINCS_fix_metric/module_sorting.f90',
  '../SPHINCS_fix_metric/module_Finite_Diff_1D.f90',
  '../SPHINCS_fix_metric/module_Artificial_Pressure_Method.f90',
  '../SPHINCS_fix_metric/module_piecewise_polytrope.f90'
]

#lorene_sources = [
#Glob('../../../Lorene/C++/Source/Binaire/*.C'),
##Glob('../../../Lorene/C++/Source/Binary_xcts/*.C'),
##Glob('../../../Lorene/C++/Source/Star/*.C'),
#Glob('../../../Lorene/C++/Source/Tenseur/*.C'),
#Glob('../../../Lorene/C++/Source/Valeur/*.C'),
#Glob('../../../Lorene/C++/Source/Tensor/*.C'),
#Glob('../../../Lorene/C++/Source/Tensor/Scalar/*.C'),
#Glob('../../../Lorene/C++/Source/Metric/*.C'),
#Glob('../../../Lorene/C++/Source/Metrique/*.C'),
#Glob('../../../Lorene/C++/Source/Connection/*.C'),
#Glob('../../../Lorene/C++/Source/Diff/*.C'),
#Glob('../../../Lorene/C++/Source/Itbl/*.C'),
#Glob('../../../Lorene/C++/Source/Tbl/*.C'),
#Glob('../../../Lorene/C++/Source/Mtbl/*.C'),
#Glob('../../../Lorene/C++/Source/Grille3d/*.C'),
#Glob('../../../Lorene/C++/Source/Map/*.C'),
#Glob('../../../Lorene/C++/Source/Mtbl_cf/*.C'),
#Glob('../../../Lorene/C++/Source/Etoile/*.C'),
#Glob('../../../Lorene/C++/Source/Eos/*.C'),
#Glob('../../../Lorene/C++/Source/Map_et/*.C'),
#Glob('../../../Lorene/C++/Source/Mg3d/*.C'),
#Glob('../../../Lorene/C++/Source/Cmp/*.C'),
#Glob('../../../Lorene/C++/Source/Matrice/*.C'),
#Glob('../../../Lorene/C++/Source/Param/*.C'),
#Glob('../../../Lorene/C++/Source/Param_elliptic/*.C'),
#Glob('../../../Lorene/C++/Source/Coord/*.C'),
#Glob('../../../Lorene/C++/Source/Base_val/*.C'),
#Glob('../../../Lorene/C++/Source/Base_vect/*.C'),
#Glob('../../../Lorene/C++/Source/Non_class_members/Utilities/*.C'),
#Glob('../../../Lorene/C++/Source/Non_class_members/PDE/*.C'),
#Glob('../../../Lorene/C++/Source/Non_class_members/Operators/*.C'),
#Glob('../../../Lorene/C++/Source/Non_class_members/Coef/*.C'),
#Glob('../../../Lorene/C++/Source/Non_class_members/Coef/FFTW3/*.C'),
#Glob('../../../Lorene/C++/Source/Non_class_members/Graphics/save_profile.C'),
##Glob('../../../Lorene/C++/Source/Non_class_members/Coef/FFT991/*.C'),
#Glob('../../../Lorene/C++/Source/Ope_elementary/*.C'),
#Glob('../../../Lorene/C++/Source/Ope_elementary/Ope_helmholtz_minus_2d/*.C'),
#Glob('../../../Lorene/C++/Source/Ope_elementary/Ope_helmholtz_minus_pseudo_1d/*.C'),
#Glob('../../../Lorene/C++/Source/Ope_elementary/Ope_poisson_2d/*.C'),
#Glob('../../../Lorene/C++/Source/Ope_elementary/Ope_poisson_pseudo_1d/*.C'),
#Glob('../../../Lorene/C++/Source/Ope_elementary/Ope_pois_vect_r/*.C'),
#Glob('../../../Lorene/C++/Source/Ope_elementary/Ope_sec_order/*.C'),
#Glob('../../../Lorene/C++/Source/Ope_elementary/Ope_sec_order_r2/*.C'),
#Glob('../../../Lorene/C++/Source/Ope_elementary/Ope_vorton/*.C')
#]

#lorene_sources_bin_ns = ['../../../Lorene/Export/C++/Source/bin_ns.C',
#                         '../../../Lorene/Export/C++/Source/bin_ns_aux.C',
#                         '../../../Lorene/Export/C++/Source/write_lines.C']

################################################################################
# FLAVOUR= 1. Link to LORENE library

if flavour == '1': #

  build_flavour= '-Dflavour=1'

  env['LIBPATH'] = ['../../../Lorene/Lib']

  if debug == 'FALSE': #

    env['LIBS'] = ['stdc++', 'gsl', 'lapack', 'fftw3', 'blas', 'gslcblas', \
                   'gfortran', 'lorene_export', 'lorene', 'lorenef77']
    #, 'm'

  if debug == 'TRUE': #

    env['LIBS'] = ['stdc++', 'gsl', 'lapack', 'fftw3', 'blas', 'gslcblas', \
                   'gfortran', 'lorene_export_g', 'lorene_g', 'lorenef77_g']
    #, 'm'

  sources_flavour = module_bns_lorene + module_diffstar_lorene \
                    + module_ejecta_generic + module_sphincs_id_lorene

################################################################################
# FLAVOUR= 2. Interpolate data from a grid. Do not link to LORENE library

if flavour == '2': #

  build_flavour= '-Dflavour=2'

  env['LIBS'] = ['stdc++']

  sources_flavour = module_ejecta_generic + module_sphincs_id_interpolate

################################################################################

################################################################################
# BUILD OPTIONS
################################################################################

env['F90FILESUFFIXES']=['.f90','.f']

# Fortran compiler
env['F90'] = fortran_compiler

# C++ compiler
env['CXX'] = cpp_compiler

if debug == 'FALSE': #

  ##############################################################################
  # FORTRAN PRODUCTION BUILD OPTIONS
  ##############################################################################
  if fortran_compiler == 'ifort':

    env['F90FLAGS'] = [ '-O3', '-qopenmp', '-qoverride-limits', '-xHOST', \
                        '-heap-arrays', '-qopt-report', \
                        '-qopt-report-phase=vec,openmp', '-no-wrap-margin', \
                        '-warn', '-g', '-CB', '-CS', '-traceback', '-fpp', \
                        build_flavour ]

  if fortran_compiler == 'gfortran':

    env['F90FLAGS'] = [ '-O2', '-fopenmp', '-ftree-vectorize','-fopt-info-vec',\
                        '-fopt-info-loop', '-g', '-fbacktrace', '-cpp', \
                        '-ffree-line-length-none', '-ffixed-line-length-none', \
                        '-Wall', '-Wextra', build_flavour ]

  ##############################################################################
  # C++ PRODUCTION BUILD OPTIONS
  ##############################################################################
  if cpp_compiler == 'icpc':

    env['CXXFLAGS'] = [ '-O3', '-g', '-std=c++11', '-qopenmp', '-xHOST', \
                        '-qopt-report', '-qopt-report-phase=vec,openmp', \
                        '-Wall', '-m64', '-DNDEBUG', '-pedantic', '-Wall', \
                        '-W', '-Wundef', '-Wshadow', '-Wcast-qual', \
                        '-Wconversion', '-Winline', '-Woverloaded-virtual' ]
    #-ip, -ipo, -ipo=n
    # icx compiler: best of icc and best of clang
    # -o prog

  if cpp_compiler == 'gcc' or cpp_compiler == 'g++':

    env['CXXFLAGS'] = [ '-O3', '-g', '-std=c++11', '-fopenmp', '-Wall', \
                        '-ftree-vectorize','-fopt-info-vec', '-fopt-info-loop',\
                        '-m64', '-DNDEBUG', '-pedantic', '-Wall', \
                        '-Wundef', '-Wshadow', '-Wcast-qual', '-Wcast-align', \
                        '-Wconversion', '-Winline', '-Wabi=11', \
                        '-Wold-style-cast', '-Woverloaded-virtual', \
                        '-Wfatal-errors' ]

if debug == 'TRUE': #

  ##############################################################################
  # FORTRAN DEBUG BUILD OPTIONS
  ##############################################################################
  if fortran_compiler == 'ifort':

    env['F90FLAGS'] = [ '-O0', '-g', '-qopenmp', '-qoverride-limits', \
                        '-xHOST', '-heap-arrays', '-qopt-report', \
                        '-qopt-report-phase=vec,openmp', '-no-wrap-margin', \
                        '-CB', '-CS', '-traceback', '-fpe0', '-warn', \
                        '-debug extended', '-fpp', build_flavour ]

    # More F90 flags for debugging
    #env['F90FLAGS'] = [ '-r8','-g','-qopenmp','-O0', '-ftz', \
    #                    '-heap-arrays 5000', '-fno-alias', '-traceback', \
    #                    '-debug', '-debug all', '-nolib-inline','-align all',\
    #                    '-check bounds', '-fno-inline-functions', '-prec-div',\
    #                    '-prec-sqrt', '-fp-stack-check', '-init=snan,arrays', \
    #                    '-traceback', '-fPIC', '-fpe3', '-heap-arrays 32', \
    #                    '-assume realloc_lhs','-assume protect_parens,minus0',\
    #                    '-assume no old_maxminloc', '-warn unused', \
    #                    '-align dcommons',  '-xHOST', '-qopt-report', \
    #                    '-qopt-report-phase=vec,openmp', '-fp-model strict', \
    #                    '-no-wrap-margin', '-ftrapuv', '-mp' ]

  if fortran_compiler == 'gfortran':

    env['F90FLAGS'] = [ '-O0', '-g3', '-fopenmp', '-ftree-vectorize', \
                        '-fopt-info-vec', '-fopt-info-loop', '-fbacktrace', \
                        '-ftrapping-math', '-fbounds-check', \
                        '-ffpe-trap=zero,overflow,underflow', \
                        '-Wuninitialized','-W','-Wall', '-Wextra', '-cpp', \
                        '-ffree-line-length-none', '-ffixed-line-length-none', \
                        build_flavour ]

  ##############################################################################
  # C++ DEBUG BUILD OPTIONS
  ##############################################################################
  if cpp_compiler == 'icpc':

    # C++ flags for debugging
    # See also https://www.nas.nasa.gov/hecc/support/kb/recommended-intel-compiler-debugging-options_92.html
    env['CXXFLAGS'] = [ '-O0', '-g', '-std=c++11', '-qopenmp', '-xHOST', \
                        '-qopt-report', '-qopt-report-phase=vec,openmp', \
                        '-Wall', '-m64', '-pedantic', '-Wall', '-Wundef',\
                        '-Wshadow', '-Wcast-qual', '-Wcast-align', \
                        '-Wconversion', '-Winline', '-Wabi=11', \
                        '-Wold-style-cast', '-Woverloaded-virtual', \
                        '-traceback', '-check-uninit', '-ftrapuv', '-debug', \
                        '-debug extended', '-fpe3', '-mp', '-fp-model strict', \
                        '-align all', '-check bounds', '-assume realloc_lhs', \
                        '-assume protect_parens,minus0', \
                        '-assume no old_maxminloc', '-warn unused', \
                        '-align dcommons' ]

  if cpp_compiler == 'gcc' or cpp_compiler == 'g++':

    env['CXXFLAGS'] = [ '-O0', '-g3', '-std=c++11', '-fopenmp', '-Wall', \
                        '-ftree-vectorize','-fopt-info-vec', '-fopt-info-loop',\
                        '-m64', '-pedantic', '-Wall', \
                        '-Wundef', '-Wshadow', '-Wcast-qual', '-Wcast-align', \
                        '-Wconversion', '-Winline', '-Wabi=11', \
                        '-Wold-style-cast', '-Woverloaded-virtual', \
                        '-Wfatal-errors' ]

################################################################################

################################################################################
# PROGRAMS
################################################################################

sphincs_id       = 'sphincs_id'       + version + '.x'
convergence_test = 'convergence_test' + version + '.x'
write_par_eos    = 'write_par_eos'    + version + '.x'

program_sphincs_id       = ['src/sphincs_id.f90']
program_convergence_test = ['src/convergence_test.f90']
program_write_par_eos    = ['src/write_par_eos.f90']

################################################################################

################################################################################
# BUILD COMMANDS
################################################################################
#lorene_sources + lorene_sources_bin_ns

Progress('Evaluating $TARGET\n')

Program( sphincs_id, \
         sources_base + sources_flavour + sources_mesh + sources_sphincs_fm \
         + sources_sphincs_bssn + program_sphincs_id )

Program( convergence_test, \
         sources_base + sources_flavour + sources_mesh + sources_sphincs_fm \
         + sources_sphincs_bssn + program_convergence_test )

Program( write_par_eos, \
         sources_base + sources_flavour + sources_mesh + sources_sphincs_fm \
         + sources_sphincs_bssn + program_write_par_eos )

################################################################################
#
Decider('MD5-timestamp')
