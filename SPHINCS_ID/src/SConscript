################################################################################
# SConscript file to build SPHINCS_ID
# Author:     Francesco Torsello
################################################################################
# Copyright (C) 2020, 2021, 2022 Francesco Torsello
#
# This file is part of SPHINCS_ID
#
# SPHINCS_ID is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# SPHINCS_ID is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with SPHINCS_ID. If not, see <https://www.gnu.org/licenses/>.
# The copy of the GNU General Public License should be in the file
# 'COPYING'.
################################################################################

################################################################################
# ACRONYMS
################################################################################
# ID          : Initial Data
# SPHINCS_ID  : Smoothed Particle Hydrodynamics IN Curved Spacetime - ID builder
################################################################################

import os
Import('env flavour full_flavour lorene_flavour fuka_flavour \
        interpolate_flavour version MPI_ranks working_dir host \
        fortran_compiler cpp_compiler debug')

################################################################################
# EXTERNAL LIBRARIES
################################################################################

home_sphincs  = os.environ['HOME_SPHINCS']

#libsphincs_bssn_dir = [os.environ['HOME_SPHINCS'] \
libsphincs_bssn_dir = ['/disk/stero-1/ftors/SPHINCS_20230411' \
                       + '/sphincs_repository/SPHINCS_BSSN/lib' ]

if flavour == full_flavour or flavour == lorene_flavour:
  liblorene_dir = [os.environ['HOME_LORENE'] + '/Lib']

if flavour == full_flavour or flavour == fuka_flavour:
  libkadath_dir = [os.environ['HOME_KADATH'] + '/lib']

################################################################################
# SPHINCS_ID sources
################################################################################

exec(open('../tools/sphincs_id_src.py').read())

################################################################################
# SOURCE FILES FROM SPHINCS_BSSN
################################################################################
home_sphincs='../../../SPHINCS_20230411'
#env['F90PATH'] = [
#  '.',
#  home_sphincs + '/BSSN',
#  home_sphincs + '/sphincs_repository/SPHINCS_fix_metric',
#  home_sphincs + '/sphincs_repository/SPHINCS_BSSN'
#]
env['F90PATH'] = ['.']

mesh_dir         = [home_sphincs + '/BSSN/']
sphincs_bssn_dir = [home_sphincs + '/sphincs_repository/SPHINCS_BSSN/']
sphincs_fm_dir   = [home_sphincs + '/sphincs_repository/SPHINCS_fix_metric/']

sources_mesh = [
  'module_mesh_refinement.f90',
  'submodule_prolongation.f90',
  'submodule_restriction.f90',
  'submodule_utilities.f90',
  'submodule_parameter.f90',
  'submodule_allocation.f90',
  'submodule_output.f90',
  'submodule_refine.f90',
  'submodule_RK4.f90',
  #
  'module_ADM_refine.f90',
  'module_BSSN_refine.f90',
  'module_BSSN_parameters.f90',
  'module_GravityAcceleration_refine.f90',
  #
  'module_McLachlan_refine.f90',
  'submodule_ML_evolution.f90',
  'submodule_ML_init.f90',
  'submodule_ML_utilities.f90',
  'submodule_ML_constraints.f90',
  'submodule_ML_boundary.f90',
  'submodule_ML_allocation.f90',
  'submodule_ML_output.f90',
  #
  'module_TOV_refine.f90',
  'module_Tmunu_refine.f90',
  'module_map_metric_2_particles_refine.f90',
  'module_evolution_parameters.f90',
  'module_Numerics.f90',
  'module_Hermite_refine.f90',
  'Hermite_3D_Weights.f',
  'Hermite5_3D_Weights.f',
  'module_WENO_refine.f90',
  'ML_BSSN_NV_EvolutionInteriorSplitBy1.cc',
  'ML_BSSN_NV_EvolutionInteriorSplitBy2.cc',
  'ML_BSSN_NV_EvolutionInteriorSplitBy3.cc',
  'ML_BSSN_NV_InitialADMBase1Everywhere.cc',
  'ML_BSSN_NV_InitialADMBase2Interior.cc',
  'ML_BSSN_NV_MatterAccelerationInterior.cc',
  'ML_BSSN_NV_EnforceEverywhere.cc',
  'ML_BSSN_NV_ADMDerivativesInterior.cc',
  'ML_BSSN_NV_ConstraintsInterior.cc',
  'ML_BSSN_NV_ConstraintsInterior_mod.cc',
  'ML_BSSN_NV_RicciInterior.cc',
  #
  'module_Extract_Mass.f90',
  'submodule__Extract_Mass_impl.f90',
  #
  #
  'module_Collapse.f90',
  'submodule_Collapse.f90',
  #
  'fermi_step_f.f90',
  'bssn_parameters.cc'
]

sources_sphincs_bssn = [
  'module_CP_distribute.f90',
  'module_MLS.f90',
  'module_SelfRegularization.f90',
  'module_particle_mesh_hash_grid.f90',
  'module_map_particles_2_grid.f90',
  'module_integ_hydro_BSSN.f90',
  'module_gradient.f90',
  'module_timing.f90',
  'module_debug_output.f90',
  'module_dyn_metric_on_particles.f90',
  'module_alive_flag.f90',
  'module_quadrup_GW_extraction.f90',
  'module_LRE.f90'
]

sources_sphincs_fm = [
  'module_files.f90',
  'module_constants.f90',
  'module_units.f90',
  'module_SPHINCS_options.f90',
  'module_boundaries.f90',
  'module_Numerical_Recipes.f90',
  'module_matrix.f90',
  'module_3plus1.f90',
  'module_kernel_table.f90',
  'module_RCB_tree_neighbours.f90',
  'module_SPH_variables.f90',
  'module_analyze.f90',
  'submodule_analyze_adm_variables.f90',
  'module_EOS.f90',
  'module_set_h.f90',
  'module_tensor.f90',
  'module_BH_params.f90',
  'module_input_output.f90',
  'module_recovery_via_pressure.f90',
  'module_SPHINCS_SPH_v2.f90',
  'module_SPHINCS_version.f90',
  'module_SPHINCS_logbook.f90',
  'module_relativistic_Eigenvalues.f90',
  'module_reconstruction.f90',
  'module_deactivate_particles.f90',
  'module_sorting.f90',
  'module_Finite_Diff_1D.f90',
  'module_Artificial_Pressure_Method.f90',
  'module_piecewise_polytrope.f90',
  'module_particle_identity.f90',
  'submodule_particle_identity.f90',
]

for i in range(len(sources_mesh)):
 sources_mesh[i]           = mesh_dir[0]          + sources_mesh[i]

for i in range(len(sources_sphincs_bssn)):
 sources_sphincs_bssn[i]   = sphincs_bssn_dir[0]  + sources_sphincs_bssn[i]

for i in range(len(sources_sphincs_fm)):
 sources_sphincs_fm[i]     = sphincs_fm_dir[0]    + sources_sphincs_fm[i]

################################################################################

################################################################################
# FLAVOUR= 1. Link to LORENE and Kadath libraries, and interpolate from
#             Cartesian uniform grid

if flavour == full_flavour: #

  build_flavour = '-Dflavour=1'

  if host == 'r3x': #

    env['LIBPATH'] = liblorene_dir + libkadath_dir + libsphincs_bssn_dir

    if debug == 'FALSE': #

      env['LIBS'] = ['stdc++', 'm', \
                     'lorene_export', 'lorene', 'lorenef77',  \
                     'kadath', 'gsl', 'lapack', 'fftw3', 'blas', \
                     'gslcblas', 'gfortran', 'sphincs_bssn']

    if debug == 'TRUE': #

      env['LIBS'] = ['stdc++', 'm', 'lorene_export_g', 'lorene_g', \
                     'lorenef77_g', 'kadath-debug', 'gsl', 'lapack', 'fftw3', \
                     'blas', 'gslcblas', 'gfortran', 'sphincs_bssn']

  if host == 'Sunrise': #

    env['LIBPATH'] = liblorene_dir + libkadath_dir + \
                     ['/opt/ohpc/pub/libs/gnu8/gsl/2.6/lib', \
                      '/opt/ohpc/pub/libs/gnu8/openmpi4/scalapack/2.1.0/lib', \
                      '/opt/ohpc/pub/libs/gnu8/openmpi4/fftw/3.3.8/lib', \
                      '/opt/ohpc/pub/libs/gnu8/openblas/0.3.12/lib']

    if debug == 'FALSE': #

      env['LIBS'] = ['stdc++', 'm', 'lorene_export', 'lorene', \
                     'lorenef77', 'kadath', 'gsl', 'scalapack', 'openblas', \
                     'gslcblas', 'gfortran', 'fftw3', 'sphincs_bssn']

    if debug == 'TRUE': #

      env['LIBS'] = ['stdc++', 'm', 'lorene_export_g', 'lorene_g', \
                     'lorenef77_g', 'kadath-debug', 'gsl', 'scalapack', \
                     'openblas', 'gslcblas', 'gfortran', 'fftw3', \
                     'sphincs_bssn']

  sources_flavour = module_bns_lorene + module_diffstar_lorene \
                  + module_bns_fuka \
                  + module_ejecta_generic + module_sphincs_id_full

################################################################################
# FLAVOUR= 2. Link to LORENE library, and interpolate from Cartesian uniform
#             grid

if flavour == lorene_flavour: #

  build_flavour = '-Dflavour=2'

  if host == 'r3x': #

    env['LIBPATH'] = liblorene_dir + libsphincs_bssn_dir

    if debug == 'FALSE': #

      env['LIBS'] = ['stdc++', 'm', \
                     'lorene_export', 'lorene', 'lorenef77', \
                     'gsl', 'lapack', 'fftw3', 'blas', \
                     'gslcblas', 'gfortran', 'sphincs_bssn']

    if debug == 'TRUE': #

      env['LIBS'] = ['stdc++', 'm', 'lorene_export_g', 'lorene_g', \
                     'lorenef77_g', 'gsl', 'lapack', 'fftw3', 'blas', \
                     'gslcblas', 'gfortran', 'sphincs_bssn']

  if host == 'Sunrise': #

    env['LIBPATH'] = liblorene_dir + \
                     ['/opt/ohpc/pub/libs/gnu8/gsl/2.6/lib', \
                      '/opt/ohpc/pub/libs/gnu8/openmpi4/scalapack/2.1.0/lib', \
                      '/opt/ohpc/pub/libs/gnu8/openmpi4/fftw/3.3.8/lib', \
                      '/opt/ohpc/pub/libs/gnu8/openblas/0.3.12/lib']

    if debug == 'FALSE': #

      env['LIBS'] = ['stdc++', 'm', 'lorene_export', 'lorene', \
                     'lorenef77', 'gsl', 'scalapack', 'openblas', \
                     'gslcblas', 'gfortran', 'fftw3', 'sphincs_bssn']

    if debug == 'TRUE': #

      env['LIBS'] = ['stdc++', 'm', 'lorene_export_g', 'lorene_g', \
                     'lorenef77_g', 'gsl', 'scalapack', 'openblas', \
                     'gslcblas', 'gfortran', 'fftw3', 'sphincs_bssn']

  sources_flavour = module_bns_lorene + module_diffstar_lorene \
                  + module_ejecta_generic + module_sphincs_id_lorene

################################################################################
# FLAVOUR= 3. Link to Kadath library, and interpolate from Cartesian uniform
#             grid

if flavour == fuka_flavour: #

  build_flavour = '-Dflavour=3'

  if host == 'r3x': #

    env['LIBPATH'] = libkadath_dir + libsphincs_bssn_dir

    if debug == 'FALSE': #

      env['LIBS'] = ['stdc++', 'm', 'kadath', 'gsl', 'fftw3', 'lapack', \
                     'sphincs_bssn']

    if debug == 'TRUE': #

      env['LIBS'] = ['stdc++', 'm', 'kadath-debug', 'gsl', 'fftw3', 'lapack', \
                     'sphincs_bssn']

  if host == 'Sunrise': #

    env['LIBPATH'] = libkadath_dir + \
                     ['/opt/ohpc/pub/libs/gnu8/gsl/2.6/lib', \
                      '/opt/ohpc/pub/libs/gnu8/openmpi4/scalapack/2.1.0/lib', \
                      '/opt/ohpc/pub/libs/gnu8/openmpi4/fftw/3.3.8/lib', \
                      '/opt/ohpc/pub/libs/gnu8/openblas/0.3.12/lib']

    if debug == 'FALSE': #

      env['LIBS'] = ['stdc++', 'm', 'kadath', 'gsl', 'scalapack', 'openblas', \
                     'fftw3', 'sphincs_bssn']

    if debug == 'TRUE': #

      env['LIBS'] = ['stdc++', 'm', 'kadath', 'gsl', 'scalapack', 'openblas', \
                     'fftw3', 'sphincs_bssn']

  sources_flavour = module_bns_fuka \
                    + module_ejecta_generic + module_sphincs_id_fuka

################################################################################
# FLAVOUR= 4. Interpolate data from a grid. Do not link to LORENE library

if flavour == interpolate_flavour: #

  build_flavour= '-Dflavour=4'

  env['LIBPATH'] = libsphincs_bssn_dir

  env['LIBS'] = ['stdc++', 'm', 'sphincs_bssn']

  sources_flavour = module_ejecta_generic + module_sphincs_id_interpolate

################################################################################

################################################################################
# BUILD OPTIONS
################################################################################

env['F90FILESUFFIXES']=['.f90','.f']

build_version = '-Dvers='        + version
build_mpi     = '-DMPI_ranks='   + MPI_ranks
build_dir     = '-Dworking_dir=' + working_dir
build_host    = '-Dhost='        + host

# Include *.mod and *.smod files by SPHINCS_BSSN
#incmod_sphincs_bssn = '-I' + home_sphincs + '/sphincs_repository/SPHINCS_BSSN'
incmod_sphincs_bssn = '-I/disk/stero-1/ftors/SPHINCS_20230411/sphincs_repository/SPHINCS_BSSN'

if fortran_compiler == 'ifort':

  mod_dir = ['-module', 'mod']

if fortran_compiler == 'gfortran':

  mod_dir = ['-Jmod']

# Fortran compiler
env['F90'] = fortran_compiler

# C++ compiler
env['CXX'] = cpp_compiler

import foo

if debug == 'FALSE': #

  if host == 'r3x': #

    ############################################################################
    # FORTRAN PRODUCTION BUILD OPTIONS
    ############################################################################
    if fortran_compiler == 'ifort':

      env['F90FLAGS'] = [ '-O0', '-qopenmp', '-qoverride-limits', '-xHOST', \
                          '-heap-arrays', '-qopt-report', \
                          '-qopt-report-phase=vec,openmp', '-no-wrap-margin', \
                          '-warn', '-CB', '-CS', '-g', '-traceback', '-fpp', \
                          incmod_sphincs_bssn, \
                          build_flavour, build_mpi, build_dir, build_host, \
                          build_version ] + mod_dir
#, '-CB', '-CS', '-g', '-traceback'
    if fortran_compiler == 'gfortran':

      env['F90FLAGS'] = [ '-O0', '-fopenmp', '-ftree-vectorize', \
                          '-fopt-info-vec', '-fdollar-ok', '-fbounds-check', \
                          '-fopt-info-loop', '-g', '-fbacktrace', '-cpp', \
                          '-ffree-line-length-none', \
                          '-ffixed-line-length-none', \
                          '-Wall', '-Wextra', '-Wimplicit-interface', \
                          '-Wimplicit-procedure', \
                          incmod_sphincs_bssn, \
                          build_flavour, build_mpi, \
                          build_dir, build_host, build_version ] + mod_dir

    ############################################################################
    # C++ PRODUCTION BUILD OPTIONS
    ############################################################################
    if cpp_compiler == 'icpc':

      env['CXXFLAGS'] = [ '-O0', '-g', '-std=c++11', '-qopenmp', '-xHOST', \
                          '-qopt-report', '-qopt-report-phase=vec,openmp', \
                          '-Wall', '-m64', '-DNDEBUG', '-pedantic', '-Wall', \
                          '-W', '-Wundef', '-Wshadow', '-Wcast-qual', \
                          '-Wconversion', '-Winline', '-Woverloaded-virtual' ]
      #-ip, -ipo, -ipo=n
      # icx compiler: best of icc and best of clang
      # -o prog

    if cpp_compiler == 'gcc' or cpp_compiler == 'g++':

      env['CXXFLAGS'] = [ '-O0', '-g', '-std=c++11', '-fopenmp', '-Wall', \
                          '-ftree-vectorize','-fopt-info-vec', \
                          '-fopt-info-loop',\
                          '-m64', '-DNDEBUG', '-pedantic', '-Wall', \
                          '-Wundef', '-Wshadow', '-Wcast-qual', '-Wcast-align',\
                          '-Wconversion', '-Winline', '-Wabi=11', \
                          '-Wold-style-cast', '-Woverloaded-virtual', \
                          '-Wfatal-errors' ]

  if host == 'Sunrise': #

    ############################################################################
    # FORTRAN PRODUCTION BUILD OPTIONS
    ############################################################################
    if fortran_compiler == 'ifort':

      env['F90FLAGS'] = [ '-O3', '-qopenmp', '-qoverride-limits', \
                          '-heap-arrays', '-qopt-report', \
                          '-qopt-report-phase=vec,openmp', '-no-wrap-margin', \
                          '-warn', '-CB', '-CS', '-fpp', \
                          '-diag-disable=10346', '-static-intel', \
                          '-qopenmp-link=static', '-static', '-xHOST', \
                          '-align array64byte', \
                          incmod_sphincs_bssn, \
                          build_flavour, build_mpi, build_dir, build_host, \
                          build_version ] + mod_dir
#, '-g', '-CB', '-CS', '-traceback'
    if fortran_compiler == 'gfortran':

      env['F90FLAGS'] = [ '-O2', '-fopenmp', '-ftree-vectorize', \
                          '-fopt-info-vec', '-fdollar-ok', '-fbounds-check', \
                          '-fopt-info-loop', '-g', '-fbacktrace', '-cpp', \
                          '-ffree-line-length-none', \
                          '-ffixed-line-length-none', \
                          '-Wall', '-Wextra', '-Wimplicit-interface', \
                          '-Wimplicit-procedure', \
                          incmod_sphincs_bssn, build_flavour, \
                          build_mpi, build_dir, build_host, build_version ] \
                          + mod_dir

    ############################################################################
    # C++ PRODUCTION BUILD OPTIONS
    ############################################################################
    if cpp_compiler == 'icpc':

      env['CXXFLAGS'] = [ '-O3', '-g', '-std=c++11', '-qopenmp', '-xHOST', \
                          '-qopt-report', '-qopt-report-phase=vec,openmp', \
                          '-Wall', '-m64', '-DNDEBUG', '-pedantic',
                          '-traceback', '-diag-disable=10397', \
                          '-qoverride-limits', '-static-intel', \
                          '-qopenmp-link=static', '-static', '-fma']
      #-ip, -ipo, -ipo=n
      # icx compiler: best of icc and best of clang
      # -o prog

    if cpp_compiler == 'gcc' or cpp_compiler == 'g++':

      env['CXXFLAGS'] = [ '-O3', '-g', '-std=c++11', '-fopenmp', \
                          '-ftree-vectorize','-fopt-info-vec', \
                          '-fopt-info-loop',\
                          '-m64', '-DNDEBUG', '-pedantic', '-Wall', \
                          '-Wundef', '-Wshadow', '-Wcast-qual', '-Wcast-align',\
                          '-Wconversion', '-Winline', '-Wabi=11', \
                          '-Wold-style-cast', '-Woverloaded-virtual', \
                          '-Wfatal-errors' ]

if debug == 'TRUE': #

  if host == 'r3x': #

    ############################################################################
    # FORTRAN DEBUG BUILD OPTIONS
    ############################################################################
    if fortran_compiler == 'ifort':

      env['F90FLAGS'] = [ '-O0', '-g', '-qopenmp', '-qoverride-limits', \
                          '-xHOST', '-heap-arrays', '-qopt-report', \
                          '-qopt-report-phase=vec,openmp', '-no-wrap-margin', \
                          '-CB', '-CS', '-traceback', '-fpe0', '-warn', \
                          '-debug extended', '-fpp', \
                          incmod_sphincs_bssn, build_flavour, \
                          build_mpi, build_dir, build_host, build_version ] \
                          + mod_dir

      # More F90 flags for debugging
      #env['F90FLAGS'] = [ '-r8','-g','-qopenmp','-O0', '-ftz', \
      #                    '-heap-arrays 5000', '-fno-alias', '-traceback', \
      #                    '-debug', '-debug all', '-nolib-inline', \
      #                    '-align all',\
      #                    '-check bounds', '-fno-inline-functions', \
      #                    '-prec-div',\
      #                    '-prec-sqrt', '-fp-stack-check', \
      #                    '-init=snan,arrays', \
      #                    '-traceback', '-fPIC', '-fpe3', '-heap-arrays 32', \
      #                    '-assume realloc_lhs', \
      #                    '-assume protect_parens,minus0',\
      #                    '-assume no old_maxminloc', '-warn unused', \
      #                    '-align dcommons',  '-xHOST', '-qopt-report', \
      #                    '-qopt-report-phase=vec,openmp', '-fp-model strict', \
      #                    '-no-wrap-margin', '-ftrapuv', '-mp' ]

    if fortran_compiler == 'gfortran':

      env['F90FLAGS'] = [ '-O0', '-g3', '-fopenmp', '-ftree-vectorize', \
                          '-fopt-info-vec', '-fopt-info-loop', '-fbacktrace', \
                          '-ftrapping-math', '-fbounds-check', \
                          '-ffpe-trap=zero,overflow,underflow', \
                          '-Wuninitialized','-W','-Wall', '-Wextra', '-cpp', \
                          '-ffree-line-length-none', \
                          '-ffixed-line-length-none', '-fdollar-ok', \
                          mod_dir, incmod_sphincs_bssn, \
                          build_flavour, build_mpi, build_dir, build_host, \
                          build_version ] + mod_dir

    ############################################################################
    # C++ DEBUG BUILD OPTIONS
    ############################################################################
    if cpp_compiler == 'icpc':

      # C++ flags for debugging
      # See also https://www.nas.nasa.gov/hecc/support/kb/recommended-intel-compiler-debugging-options_92.html
      env['CXXFLAGS'] = [ '-O0', '-g', '-std=c++11', '-qopenmp', '-xHOST', \
                          '-qopt-report', '-qopt-report-phase=vec,openmp', \
                          '-Wall', '-m64', '-pedantic', '-Wall', '-Wundef',\
                          '-Wshadow', '-Wcast-qual', '-Wcast-align', \
                          '-Wconversion', '-Winline', '-Wabi=11', \
                          '-Wold-style-cast', '-Woverloaded-virtual', \
                          '-traceback', '-check-uninit', '-ftrapuv', '-debug', \
                          '-debug extended', '-fpe3', '-mp', \
                          '-fp-model strict', \
                          '-align all', '-check bounds', '-assume realloc_lhs',\
                          '-assume protect_parens,minus0', \
                          '-assume no old_maxminloc', '-warn unused', \
                          '-align dcommons' ]

    if cpp_compiler == 'gcc' or cpp_compiler == 'g++':

      env['CXXFLAGS'] = [ '-O0', '-g3', '-std=c++11', '-fopenmp', '-Wall', \
                          '-ftree-vectorize','-fopt-info-vec', \
                          '-fopt-info-loop',\
                          '-m64', '-pedantic', '-Wall', \
                          '-Wundef', '-Wshadow', '-Wcast-qual', '-Wcast-align',\
                          '-Wconversion', '-Winline', '-Wabi=11', \
                          '-Wold-style-cast', '-Woverloaded-virtual', \
                          '-Wfatal-errors' ]

  if host == 'Sunrise': #

    ############################################################################
    # FORTRAN DEBUG BUILD OPTIONS
    ############################################################################
    if fortran_compiler == 'ifort':

      env['F90FLAGS'] = [ '-O0', '-g', '-qopenmp', '-qoverride-limits', \
                          '-heap-arrays', '-qopt-report', \
                          '-qopt-report-phase=vec,openmp', '-no-wrap-margin', \
                          '-CB', '-CS', '-traceback', '-fpe0', '-warn', \
                          '-debug extended', '-fpp', '-diag-disable=10346', \
                          '-static-intel', \
                          '-qopenmp-link=static', '-static', '-xHOST', \
                          '-align array64byte', \
                          incmod_sphincs_bssn, build_flavour, \
                          build_mpi, build_dir, build_host, build_version ] \
                          + mod_dir

      # More F90 flags for debugging
      #env['F90FLAGS'] = [ '-r8','-g','-qopenmp','-O0', '-ftz', \
      #                    '-heap-arrays 5000', '-fno-alias', '-traceback', \
      #                    '-debug', '-debug all', '-nolib-inline', \
      #                    '-align all',\
      #                    '-check bounds', '-fno-inline-functions', \
      #                    '-prec-div',\
      #                    '-prec-sqrt', '-fp-stack-check', \
      #                    '-init=snan,arrays', \
      #                    '-traceback', '-fPIC', '-fpe3', '-heap-arrays 32', \
      #                    '-assume realloc_lhs', \
      #                    '-assume protect_parens,minus0',\
      #                    '-assume no old_maxminloc', '-warn unused', \
      #                    '-align dcommons',  '-xHOST', '-qopt-report', \
      #                    '-qopt-report-phase=vec,openmp', '-fp-model strict', \
      #                    '-no-wrap-margin', '-ftrapuv', '-mp' ]

    if fortran_compiler == 'gfortran':

      env['F90FLAGS'] = [ '-O0', '-g3', '-fopenmp', '-ftree-vectorize', \
                          '-fopt-info-vec', '-fopt-info-loop', '-fbacktrace', \
                          '-ftrapping-math', '-fbounds-check', \
                          '-ffpe-trap=zero,overflow,underflow', \
                          '-Wuninitialized','-W','-Wall', '-Wextra', '-cpp', \
                          '-ffree-line-length-none', \
                          '-ffixed-line-length-none', '-fdollar-ok', \
                          incmod_sphincs_bssn, \
                          build_flavour, build_mpi, build_dir, build_host, \
                          build_version ] + mod_dir

    ############################################################################
    # C++ DEBUG BUILD OPTIONS
    ############################################################################
    if cpp_compiler == 'icpc':

      # C++ flags for debugging
      # See also https://www.nas.nasa.gov/hecc/support/kb/recommended-intel-compiler-debugging-options_92.html
      env['CXXFLAGS'] = [ '-O0', '-g', '-std=c++11', '-qopenmp', '-xHOST', \
                          '-qopt-report', '-qopt-report-phase=vec,openmp', \
                          '-Wall', '-m64', '-pedantic', '-Wall', '-Wundef',\
                          '-Wshadow', '-Wcast-qual', '-Wcast-align', \
                          '-Wconversion', '-Winline', '-Wabi=11', \
                          '-Wold-style-cast', '-Woverloaded-virtual', \
                          '-traceback', '-check-uninit', '-ftrapuv', '-debug', \
                          '-debug extended', '-fpe3', '-mp', \
                          '-fp-model strict', \
                          '-align all', '-check bounds', '-assume realloc_lhs',\
                          '-assume protect_parens,minus0', \
                          '-assume no old_maxminloc', '-warn unused', \
                          '-align dcommons', '-diag-disable=10397', \
                          '-qoverride-limits', '-static-intel', \
                          '-qopenmp-link=static', '-static', '-fma' ]

    if cpp_compiler == 'gcc' or cpp_compiler == 'g++':

      env['CXXFLAGS'] = [ '-O0', '-g3', '-std=c++11', '-fopenmp', '-Wall', \
                          '-ftree-vectorize','-fopt-info-vec', \
                          '-fopt-info-loop',\
                          '-m64', '-pedantic', '-Wall', \
                          '-Wundef', '-Wshadow', '-Wcast-qual', '-Wcast-align',\
                          '-Wconversion', '-Winline', '-Wabi=11', \
                          '-Wold-style-cast', '-Woverloaded-virtual', \
                          '-Wfatal-errors' ]

################################################################################

################################################################################
# PROGRAMS
################################################################################

sphincs_id                = '../bin/sphincs_id_'       + version + '.x'
convergence_test          = '../bin/convergence_test_' + version + '.x'
write_par_eos             = '../bin/write_par_eos_'    + version + '.x'
construct_newtonian_binary= '../bin/construct_newtonian_binary.x'

program_sphincs_id                = ['sphincs_id.f90']
program_convergence_test          = ['convergence_test.f90']
program_write_par_eos             = ['write_par_eos.f90']
program_construct_newtonian_binary= ['construct_newtonian_binary.f90']

################################################################################

################################################################################
# BUILD COMMANDS
################################################################################

Progress('Evaluating $TARGET\n')

Program( sphincs_id, \
         sources_base + sources_flavour + program_sphincs_id )
         #+ sources_mesh + sources_sphincs_fm + sources_sphincs_bssn

Program( convergence_test, \
         sources_base + sources_flavour + program_convergence_test )
         #+ sources_mesh + sources_sphincs_fm + sources_sphincs_bssn

Program( write_par_eos, \
         sources_base + sources_flavour + program_write_par_eos )
         #+ sources_mesh + sources_sphincs_fm + sources_sphincs_bssn

Program( construct_newtonian_binary, \
         sources_base + sources_flavour + program_construct_newtonian_binary )
         #+ sources_mesh + sources_sphincs_fm + sources_sphincs_bssn

################################################################################
#
Decider('MD5-timestamp')
