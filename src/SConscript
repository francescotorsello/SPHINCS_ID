################################################################################
# SConscript file to build SPHINCS_ID
# Author:     Francesco Torsello
################################################################################
# Copyright (C) 2020-2023 Francesco Torsello
#
# This file is part of SPHINCS_ID
#
# SPHINCS_ID is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# SPHINCS_ID is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with SPHINCS_ID. If not, see <https://www.gnu.org/licenses/>.
# The copy of the GNU General Public License should be in the file
# 'COPYING'.
################################################################################

################################################################################
# ACRONYMS
################################################################################
# ID          : Initial Data
# SPHINCS_ID  : Smoothed Particle Hydrodynamics IN Curved Spacetime - ID builder
################################################################################

import os
Import('env flavour full_flavour lorene_flavour fuka_flavour \
        interpolate_flavour version MPI_ranks working_dir host \
        fortran_compiler debug') # cpp_compiler

################################################################################
# EXTERNAL LIBRARIES
################################################################################

home_sphincs  = os.environ['HOME_SPHINCS']

libsphincs_bssn_dir = [os.environ['HOME_SPHINCS'] \
                       + '/SPHINCS_DynMetric/SPHINCS_BSSN/lib' ]

if flavour == full_flavour or flavour == lorene_flavour:
  liblorene_dir = [os.environ['HOME_LORENE'] + '/Lib']

if flavour == full_flavour or flavour == fuka_flavour:
  libkadath_dir = [os.environ['HOME_KADATH'] + '/lib']

################################################################################
# SPHINCS_ID SOURCES
################################################################################

exec(open('../tools/sphincs_id_src.py').read())

################################################################################
# SPHINCS_BSSN SOURCES
# (NOT NEEDED SINCE SPHINCS_ID IS LINKED TO THE SPHINCS_BSSN LIBRARY;
#  KEPT HERE IN CASE THEY WILL BE NEEDED)
################################################################################

#exec(open('../tools/sphincs_bssn_src.py').read())

################################################################################
# FLAVOUR-SPECIFIC OPTIONS
################################################################################

exec(open('../tools/flavours.py').read())

################################################################################
# BUILD OPTIONS
################################################################################

env['F90FILESUFFIXES']=['.f90','.f']

build_version = '-Dvers='        + version
build_mpi     = '-DMPI_ranks='   + MPI_ranks
build_dir     = '-Dworking_dir=' + working_dir
build_host    = '-Dhost='        + host

# Include *.mod and *.smod files by SPHINCS_BSSN
incmod_sphincs_bssn = '-I' + home_sphincs + '/SPHINCS_DynMetric/SPHINCS_BSSN'

if fortran_compiler == 'ifort':

  mod_dir = ['-module', 'mod']

if fortran_compiler == 'gfortran':

  mod_dir = ['-Jmod']

# Fortran compiler
env['F90'] = fortran_compiler

# C++ compiler
#env['CXX'] = cpp_compiler

if debug == 'FALSE': #

  if host == 'r3x': #

    exec(open('../tools/options_r3x.py').read())

  if host == 'Sunrise': #

    exec(open('../tools/options_sunrise.py').read())

if debug == 'TRUE': #

  if host == 'r3x': #

    exec(open('../tools/options_r3x_dbg.py').read())

  if host == 'Sunrise': #

    exec(open('../tools/options_sunrise_dbg.py').read())

################################################################################

################################################################################
# PROGRAMS
################################################################################

sphincs_id                = '../bin/sphincs_id_'       + version + '.x'
convergence_test          = '../bin/convergence_test_' + version + '.x'
write_par_eos             = '../bin/write_par_eos_'    + version + '.x'
construct_newtonian_binary= '../bin/construct_newtonian_binary.x'

program_sphincs_id                = ['programs/sphincs_id.f90']
program_convergence_test          = ['programs/convergence_test.f90']
program_write_par_eos             = ['programs/write_par_eos.f90']
program_construct_newtonian_binary= ['programs/construct_newtonian_binary.f90']

################################################################################

################################################################################
# COMPILATION COMMANDS
################################################################################

Progress('Evaluating $TARGET\n')

Program( sphincs_id, \
         sources_base + sources_flavour + program_sphincs_id )
         #+ sources_mesh + sources_sphincs_fm + sources_sphincs_bssn

Program( convergence_test, \
         sources_base + sources_flavour + program_convergence_test )
         #+ sources_mesh + sources_sphincs_fm + sources_sphincs_bssn

Program( write_par_eos, \
         sources_base + sources_flavour + program_write_par_eos )
         #+ sources_mesh + sources_sphincs_fm + sources_sphincs_bssn

Program( construct_newtonian_binary, \
         sources_base + sources_flavour + program_construct_newtonian_binary )
         #+ sources_mesh + sources_sphincs_fm + sources_sphincs_bssn

################################################################################
#
Decider('MD5-timestamp')
